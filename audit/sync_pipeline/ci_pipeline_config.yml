# ==============================================================================
# CI/CD PIPELINE - Three-Layer Contract Validation
# ==============================================================================
#
# This configuration ensures contract alignment is validated in CI/CD pipeline
# before deployment. Supports GitHub Actions, GitLab CI, and Jenkins.
#
# Features:
# - Automated contract extraction on code changes
# - Cross-layer validation with severity-based gates
# - Schema drift detection against production
# - Type safety verification for int64 handling
# - Automatic TypeScript generation from Go
#

# ==============================================================================
# GITHUB ACTIONS CONFIGURATION
# ==============================================================================

name: Contract Alignment Validation

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**/*.go'
      - 'src/**/*.ts'
      - 'migrations/**/*.sql'
      - 'backend/migrations/**/*.sql'

env:
  GO_VERSION: '1.21'
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.10'
  DATABASE_URL: ${{ secrets.DATABASE_URL }}

jobs:
  # ==============================================================================
  # JOB: Extract Contracts
  # ==============================================================================
  extract-contracts:
    name: Extract Layer Contracts
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          # Python dependencies for contract extraction
          pip install -r audit/requirements.txt
          
          # Node dependencies
          npm ci
          
          # Go dependencies
          cd backend && go mod download
          
      - name: Extract backend contracts
        run: |
          python audit/extract_backend_contracts.py
          
      - name: Extract frontend contracts
        run: |
          python audit/extract_frontend_contracts.py
          
      - name: Extract database schema
        run: |
          python audit/database_introspection.py
          
      - name: Upload contract artifacts
        uses: actions/upload-artifact@v3
        with:
          name: contract-artifacts
          path: |
            audit/backend_contracts.json
            audit/frontend_contracts.json
            audit/database_schema.json

  # ==============================================================================
  # JOB: Validate Contracts
  # ==============================================================================
  validate-contracts:
    name: Cross-Layer Validation
    runs-on: ubuntu-latest
    needs: extract-contracts
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Download contract artifacts
        uses: actions/download-artifact@v3
        with:
          name: contract-artifacts
          path: audit/
          
      - name: Run cross-layer validation
        id: validation
        run: |
          python audit/cross_layer_validator.py
          
          # Check for critical issues
          CRITICAL_COUNT=$(jq '[.validation_results[] | select(.severity == "CRITICAL")] | length' audit/cross_layer_validation_report.json)
          echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
          
          # Generate summary
          python -c "
import json
with open('audit/cross_layer_validation_report.json', 'r') as f:
    report = json.load(f)
    
print('## Contract Validation Summary')
print(f'- Total Issues: {report[\"summary\"][\"total_issues\"]}')
print(f'- Critical: {report[\"summary\"][\"by_severity\"][\"CRITICAL\"]}')
print(f'- High: {report[\"summary\"][\"by_severity\"][\"HIGH\"]}')
print(f'- Medium: {report[\"summary\"][\"by_severity\"][\"MEDIUM\"]}')
print(f'- Low: {report[\"summary\"][\"by_severity\"][\"LOW\"]}')
          " >> $GITHUB_STEP_SUMMARY
          
      - name: Upload validation report
        uses: actions/upload-artifact@v3
        with:
          name: validation-report
          path: audit/cross_layer_validation_report.json
          
      - name: Fail on critical issues
        if: steps.validation.outputs.critical_count > 0
        run: |
          echo "❌ Found ${{ steps.validation.outputs.critical_count }} CRITICAL contract alignment issues!"
          echo "Review the validation report for details."
          exit 1

  # ==============================================================================
  # JOB: Type Safety Verification
  # ==============================================================================
  type-safety-check:
    name: TypeScript Int64 Safety
    runs-on: ubuntu-latest
    needs: extract-contracts
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Check for unsafe number usage
        run: |
          # List of int64 fields that must use SafeBigInt
          INT64_FIELDS=(
            "totalDomains"
            "processedDomains"
            "successfulDomains"
            "failedDomains"
            "offset"
            "totalItems"
            "processedItems"
            "successfulItems"
            "failedItems"
            "totalGenerated"
            "totalValidated"
          )
          
          ERRORS=0
          
          echo "Checking TypeScript files for unsafe int64 usage..."
          
          for field in "${INT64_FIELDS[@]}"; do
            # Find TypeScript files with unsafe number type for int64 fields
            if grep -r --include="*.ts" --exclude-dir=node_modules "${field}:.*number" src/; then
              echo "❌ Found unsafe number type for int64 field: $field"
              ((ERRORS++))
            fi
          done
          
          if [ $ERRORS -gt 0 ]; then
            echo "Found $ERRORS unsafe int64 usages. Use SafeBigInt instead!"
            exit 1
          else
            echo "✅ All int64 fields use SafeBigInt correctly"
          fi
          
      - name: Run TypeScript compiler
        run: |
          npx tsc --noEmit --strict

  # ==============================================================================
  # JOB: Schema Drift Detection
  # ==============================================================================
  schema-drift-check:
    name: Database Schema Drift
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup database
        env:
          PGPASSWORD: postgres
        run: |
          # Create test database
          psql -h localhost -U postgres -c "CREATE DATABASE contract_test;"
          
          # Apply migrations
          for file in migrations/*.sql; do
            echo "Applying $file..."
            psql -h localhost -U postgres -d contract_test -f "$file"
          done
          
      - name: Run drift detection
        env:
          PGPASSWORD: postgres
        run: |
          psql -h localhost -U postgres -d contract_test -f audit/sync_pipeline/schema_drift_detector.sql > drift_report.txt
          
          # Check for critical issues
          if grep -q "CRITICAL" drift_report.txt; then
            echo "❌ Critical schema drift detected!"
            cat drift_report.txt
            exit 1
          else
            echo "✅ No critical schema drift detected"
          fi
          
      - name: Upload drift report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: schema-drift-report
          path: drift_report.txt

  # ==============================================================================
  # JOB: Generate TypeScript from Go
  # ==============================================================================
  generate-typescript:
    name: Generate TypeScript Types
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Generate TypeScript types
        run: |
          node audit/sync_pipeline/generate_types_from_go.js \
            --input backend/internal \
            --output src/lib/types/generated.ts
            
      - name: Check for changes
        id: check_changes
        run: |
          if git diff --quiet src/lib/types/generated.ts; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
          
      - name: Commit changes
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add src/lib/types/generated.ts
          git commit -m "chore: auto-generate TypeScript types from Go [skip ci]"
          git push

# ==============================================================================
# GITLAB CI CONFIGURATION (Alternative)
# ==============================================================================
# Copy this section to .gitlab-ci.yml

# stages:
#   - extract
#   - validate
#   - deploy
# 
# variables:
#   GO_VERSION: "1.21"
#   NODE_VERSION: "18"
#   PYTHON_VERSION: "3.10"
# 
# extract-contracts:
#   stage: extract
#   image: python:${PYTHON_VERSION}
#   script:
#     - pip install -r audit/requirements.txt
#     - python audit/extract_backend_contracts.py
#     - python audit/extract_frontend_contracts.py
#     - python audit/database_introspection.py
#   artifacts:
#     paths:
#       - audit/*.json
#     expire_in: 1 hour
# 
# validate-contracts:
#   stage: validate
#   image: python:${PYTHON_VERSION}
#   dependencies:
#     - extract-contracts
#   script:
#     - python audit/cross_layer_validator.py
#     - |
#       CRITICAL_COUNT=$(jq '[.validation_results[] | select(.severity == "CRITICAL")] | length' audit/cross_layer_validation_report.json)
#       if [ $CRITICAL_COUNT -gt 0 ]; then
#         echo "Found $CRITICAL_COUNT critical issues!"
#         exit 1
#       fi
#   artifacts:
#     reports:
#       junit: audit/validation_report.xml
#     paths:
#       - audit/cross_layer_validation_report.json

# ==============================================================================
# JENKINS PIPELINE (Alternative)
# ==============================================================================
# Copy this section to Jenkinsfile

# pipeline {
#     agent any
#     
#     environment {
#         GO_VERSION = '1.21'
#         NODE_VERSION = '18'
#         PYTHON_VERSION = '3.10'
#     }
#     
#     stages {
#         stage('Extract Contracts') {
#             steps {
#                 sh 'python audit/extract_backend_contracts.py'
#                 sh 'python audit/extract_frontend_contracts.py'
#                 sh 'python audit/database_introspection.py'
#             }
#         }
#         
#         stage('Validate Contracts') {
#             steps {
#                 sh 'python audit/cross_layer_validator.py'
#                 script {
#                     def report = readJSON file: 'audit/cross_layer_validation_report.json'
#                     def criticalCount = report.summary.by_severity.CRITICAL
#                     if (criticalCount > 0) {
#                         error("Found ${criticalCount} critical contract alignment issues!")
#                     }
#                 }
#             }
#         }
#         
#         stage('Type Safety Check') {
#             steps {
#                 sh 'npm run validate:types'
#                 sh 'npx tsc --noEmit --strict'
#             }
#         }
#     }
#     
#     post {
#         always {
#             archiveArtifacts artifacts: 'audit/*.json', fingerprint: true
#             publishHTML([
#                 allowMissing: false,
#                 alwaysLinkToLastBuild: true,
#                 keepAll: true,
#                 reportDir: 'audit',
#                 reportFiles: 'validation_report.html',
#                 reportName: 'Contract Validation Report'
#             ])
#         }
#     }
# }

# ==============================================================================
# NPM SCRIPTS INTEGRATION
# ==============================================================================
# Add these to package.json:
#
# "scripts": {
#   "validate:contracts": "node audit/sync_pipeline/contract_validator.sh",
#   "generate:types": "node audit/sync_pipeline/generate_types_from_go.js",
#   "validate:types": "tsc --noEmit --strict",
#   "audit:full": "npm run validate:contracts && npm run validate:types",
#   "precommit": "npm run audit:full"
# }