{
  "metadata": {
    "validationDate": "2025-06-19T20:33:00Z",
    "phase": 4,
    "description": "Cross-layer validation report comparing Go backend (authoritative), PostgreSQL database, and TypeScript frontend contracts",
    "authoritativeSource": "Go Backend (backend_contracts.json)",
    "validationScope": {
      "entitiesValidated": 15,
      "fieldsValidated": 312,
      "endpointsValidated": 45,
      "enumsValidated": 10
    }
  },
  "severityLevels": {
    "CRITICAL": "Data integrity risk, security vulnerability, or runtime error potential",
    "HIGH": "Type mismatch or missing required fields that could cause failures",
    "MEDIUM": "Naming inconsistencies or optional field mismatches",
    "LOW": "Documentation or minor consistency issues"
  },
  "issuesByEntity": {
    "Campaign": {
      "criticalIssues": [
        {
          "field": "totalItems/processedItems/successfulItems/failedItems",
          "issue": "Type mismatch - int64 chain broken",
          "details": {
            "backend": "int64 (Go)",
            "database": "bigint (PostgreSQL)",
            "frontend": "number in API models, SafeBigInt in core types"
          },
          "impact": "Potential integer overflow for campaigns with >2^53 items",
          "remediation": "Frontend API models must use SafeBigInt for all int64 fields"
        }
      ],
      "highIssues": [
        {
          "field": "offsetIndex",
          "issue": "Missing in frontend Campaign type",
          "details": {
            "backend": "Present in GeneratedDomain",
            "database": "offset_index bigint",
            "frontend": "Missing from Campaign and GeneratedDomain types"
          },
          "impact": "Cannot track domain generation progress accurately"
        }
      ],
      "mediumIssues": [
        {
          "field": "metadata",
          "issue": "Type representation inconsistency",
          "details": {
            "backend": "*json.RawMessage",
            "database": "jsonb",
            "frontend": "Record<string, unknown>?"
          },
          "impact": "Potential serialization issues with complex metadata"
        }
      ]
    },
    "User": {
      "criticalIssues": [
        {
          "field": "passwordHash/passwordPepperVersion",
          "issue": "Sensitive fields exposed in frontend type definition",
          "details": {
            "backend": "Excluded from JSON with tag '-'",
            "database": "password_hash, password_pepper_version",
            "frontend": "Not present (correct), but UserAPI model inconsistent"
          },
          "impact": "Security risk if sensitive fields accidentally exposed"
        }
      ],
      "highIssues": [
        {
          "field": "roles/permissions",
          "issue": "Type mismatch between backend and frontend",
          "details": {
            "backend": "Complex Role and Permission structs",
            "database": "Normalized auth.roles and auth.permissions tables",
            "frontend": "Array<string> in API model, Role[] and Permission[] in core type"
          },
          "impact": "Loss of role/permission metadata (displayName, description)"
        }
      ]
    },
    "Persona": {
      "highIssues": [
        {
          "field": "configDetails",
          "issue": "Type safety concerns",
          "details": {
            "backend": "json.RawMessage with validation",
            "database": "jsonb",
            "frontend": "Typed as HttpPersonaConfig | DnsPersonaConfig"
          },
          "impact": "Frontend assumes structure that backend doesn't guarantee"
        },
        {
          "field": "Description",
          "issue": "Nullability mismatch",
          "details": {
            "backend": "sql.NullString",
            "database": "text nullable",
            "frontend": "string? (correct alignment)"
          },
          "impact": "None - properly handled"
        }
      ]
    },
    "Proxy": {
      "highIssues": [
        {
          "field": "protocol",
          "issue": "Nullability inconsistency",
          "details": {
            "backend": "*ProxyProtocolEnum (pointer, nullable)",
            "database": "text nullable",
            "frontend": "ProxyProtocol? (optional but not nullable type)"
          },
          "impact": "Frontend may not handle null protocol correctly"
        },
        {
          "field": "port",
          "issue": "Type representation mismatch",
          "details": {
            "backend": "sql.NullInt32",
            "database": "integer nullable",
            "frontend": "number?"
          },
          "impact": "Potential issues with null vs undefined"
        }
      ]
    },
    "WebSocketMessages": {
      "criticalIssues": [
        {
          "field": "Message format",
          "issue": "Incompatible message structures",
          "details": {
            "backend": "Standard format with type, timestamp, data fields",
            "frontend": "Different structure with id, sequenceNumber, additional fields"
          },
          "impact": "WebSocket messages may fail to parse correctly",
          "remediation": "Align frontend WebSocketMessage type with backend format"
        }
      ],
      "highIssues": [
        {
          "field": "totalItems in progress messages",
          "issue": "int64 type not preserved",
          "details": {
            "backend": "int64",
            "frontend": "number"
          },
          "impact": "Progress tracking fails for large campaigns"
        }
      ]
    },
    "CampaignParams": {
      "criticalIssues": [
        {
          "entity": "DomainGenerationCampaignParams",
          "field": "totalPossibleCombinations/currentOffset",
          "issue": "int64 fields using number type",
          "details": {
            "backend": "int64",
            "database": "bigint",
            "frontend": "number in param types"
          },
          "impact": "Cannot handle large domain spaces (>2^53 combinations)"
        }
      ],
      "highIssues": [
        {
          "entity": "HTTPKeywordCampaignParams",
          "field": "sourceType",
          "issue": "Enum values don't match",
          "details": {
            "backend": "Expects 'DomainGeneration', 'DNSValidation'",
            "database": "CHECK constraint with these exact values",
            "frontend": "Not validated in types"
          },
          "impact": "Invalid sourceType will cause database constraint violation"
        }
      ]
    }
  },
  "enumValidation": {
    "CampaignType": {
      "status": "ALIGNED",
      "values": {
        "backend": ["domain_generation", "dns_validation", "http_keyword_validation"],
        "database": ["domain_generation", "dns_validation", "http_keyword_validation"],
        "frontend": ["domain_generation", "dns_validation", "http_keyword_validation"]
      }
    },
    "CampaignStatus": {
      "status": "MISALIGNED",
      "issue": "Frontend has extra 'archived' status",
      "values": {
        "backend": ["pending", "queued", "running", "pausing", "paused", "completed", "failed", "cancelled"],
        "database": "No explicit constraint found",
        "frontend": ["pending", "queued", "running", "pausing", "paused", "completed", "failed", "archived", "cancelled"]
      }
    },
    "PersonaType": {
      "status": "ALIGNED",
      "values": {
        "backend": ["dns", "http"],
        "database": ["dns", "http"],
        "frontend": ["dns", "http"]
      }
    },
    "ProxyProtocol": {
      "status": "ALIGNED",
      "values": {
        "backend": ["http", "https", "socks5", "socks4"],
        "database": "No explicit constraint",
        "frontend": ["http", "https", "socks5", "socks4"]
      }
    }
  },
  "apiContractValidation": {
    "authentication": {
      "login": {
        "status": "PARTIAL_MISMATCH",
        "issues": [
          {
            "field": "requiresCaptcha vs requires_captcha",
            "severity": "MEDIUM",
            "details": "Backend uses requiresCaptcha, frontend expects requires_captcha"
          }
        ]
      }
    },
    "campaigns": {
      "createCampaign": {
        "status": "TYPE_SAFETY_ISSUE",
        "issues": [
          {
            "field": "Request body type safety",
            "severity": "HIGH",
            "details": "Frontend ServicesCreateCampaignRequest doesn't enforce conditional validation for campaign-type-specific params"
          }
        ]
      },
      "listCampaigns": {
        "status": "RESPONSE_TYPE_MISMATCH",
        "issues": [
          {
            "field": "Response array items",
            "severity": "CRITICAL",
            "details": "Backend returns models.CampaignAPI with int64 fields, frontend ModelsCampaignAPI uses number type"
          }
        ]
      }
    }
  },
  "namingConventionValidation": {
    "transformationRules": {
      "goToDb": "camelCase to snake_case",
      "goToJson": "camelCase (configurable via tags)",
      "dbToFrontend": "snake_case to camelCase"
    },
    "violations": [
      {
        "entity": "Campaign",
        "field": "userId",
        "issue": "Inconsistent naming",
        "details": {
          "backend": "UserID (Go field) -> user_id (db) -> userId (json)",
          "database": "user_id",
          "frontend": "userId"
        }
      }
    ]
  },
  "typeTransformationChain": {
    "int64Fields": {
      "status": "BROKEN",
      "chain": "Go int64 -> PostgreSQL bigint -> TypeScript ???",
      "issues": [
        "Frontend API client models use 'number' for int64 fields",
        "Core types use SafeBigInt branded type",
        "Transformation not consistently applied at API boundary"
      ],
      "affectedFields": [
        "Campaign: totalItems, processedItems, successfulItems, failedItems",
        "GeneratedDomain: offsetIndex",
        "DomainGenerationParams: totalPossibleCombinations, currentOffset"
      ]
    },
    "uuidFields": {
      "status": "MOSTLY_ALIGNED",
      "chain": "Go uuid.UUID -> PostgreSQL uuid -> TypeScript UUID (branded)",
      "issues": [
        "API models use string instead of branded UUID type",
        "Transformation happens in service layer, not at API boundary"
      ]
    },
    "timestampFields": {
      "status": "ALIGNED",
      "chain": "Go time.Time -> PostgreSQL timestamptz -> TypeScript ISODateString",
      "notes": "Properly handled with branded type"
    }
  },
  "validationRules": {
    "backendValidation": {
      "email": "required,email",
      "password": "required,min=12",
      "campaignName": "required",
      "personaName": "required,min=1,max=255"
    },
    "frontendValidation": {
      "status": "PARTIAL",
      "issues": [
        "Zod schemas exist but not used consistently",
        "API client doesn't validate responses at runtime",
        "Form validation uses different rules than backend"
      ]
    }
  },
  "securityFindings": {
    "critical": [
      {
        "issue": "Password validation rules inconsistent",
        "details": {
          "backend": "min=12",
          "frontend": "Various validation in different components"
        },
        "impact": "Users might create passwords that backend rejects"
      }
    ],
    "high": [
      {
        "issue": "Session type missing security fields",
        "details": {
          "backend": "Tracks IPAddress, UserAgent, Fingerprints",
          "database": "auth.sessions has security tracking fields",
          "frontend": "Session type doesn't include security fields"
        },
        "impact": "Cannot implement session security features in frontend"
      }
    ]
  },
  "statisticsSummary": {
    "totalIssues": 47,
    "bySeverity": {
      "CRITICAL": 8,
      "HIGH": 19,
      "MEDIUM": 15,
      "LOW": 5
    },
    "byCategory": {
      "typeMismatch": 22,
      "missingFields": 11,
      "enumMismatch": 3,
      "validationInconsistency": 7,
      "securityConcerns": 4
    }
  }
}