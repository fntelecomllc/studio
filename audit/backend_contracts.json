{
  "metadata": {
    "extractionDate": "2025-06-19T20:08:00Z",
    "backendPath": "/home/vboxuser/studio/backend",
    "version": "1.0",
    "description": "Complete extraction of Go backend architectural elements including HTTP endpoints, data models, API contracts, and configurations"
  },
  "httpEndpoints": {
    "authentication": {
      "basePath": "/api/v2/auth",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v2/auth/login",
          "handler": "AuthHandler.Login",
          "auth": false,
          "description": "Authenticate a user with email and password",
          "requestBody": {
            "type": "models.LoginRequest",
            "fields": {
              "email": { "type": "string", "validation": "required,email" },
              "password": { "type": "string", "validation": "required,min=12" },
              "rememberMe": { "type": "bool" },
              "captchaToken": { "type": "string" }
            }
          },
          "responses": {
            "200": {
              "type": "models.LoginResponseAPI",
              "fields": {
                "success": { "type": "bool" },
                "user": { "type": "*models.UserAPI" },
                "error": { "type": "string" },
                "requiresCaptcha": { "type": "bool" },
                "sessionId": { "type": "string" },
                "expiresAt": { "type": "string" }
              }
            },
            "400": { "type": "ErrorResponse", "description": "Invalid request format" },
            "401": { "type": "ErrorResponse", "description": "Invalid credentials" },
            "423": { "type": "ErrorResponse", "description": "Account locked" },
            "403": { "type": "ErrorResponse", "description": "Account inactive" }
          }
        },
        {
          "method": "POST",
          "path": "/api/v2/auth/logout",
          "handler": "AuthHandler.Logout",
          "auth": false,
          "description": "Logout and invalidate session",
          "responses": {
            "200": { "message": "Logged out successfully" }
          }
        },
        {
          "method": "POST",
          "path": "/api/v2/auth/refresh",
          "handler": "AuthHandler.RefreshSession",
          "auth": false,
          "description": "Refresh the current session",
          "responses": {
            "200": { "expiresAt": "string" },
            "401": { "type": "ErrorResponse", "description": "Session expired or not found" }
          }
        },
        {
          "method": "GET",
          "path": "/api/v2/auth/permissions",
          "handler": "AuthHandler.GetPermissions",
          "auth": true,
          "description": "Get all available permission strings",
          "responses": {
            "200": { "permissions": ["string"] }
          }
        }
      ]
    },
    "user": {
      "basePath": "/api/v2",
      "endpoints": [
        {
          "method": "GET",
          "path": "/api/v2/me",
          "handler": "AuthHandler.Me",
          "auth": true,
          "description": "Get current user information",
          "responses": {
            "200": { "type": "models.UserAPI" },
            "401": { "type": "ErrorResponse", "description": "Authentication required" },
            "404": { "type": "ErrorResponse", "description": "User not found" }
          }
        },
        {
          "method": "POST",
          "path": "/api/v2/change-password",
          "handler": "AuthHandler.ChangePassword",
          "auth": true,
          "requestBody": {
            "type": "models.ChangePasswordRequest",
            "fields": {
              "currentPassword": { "type": "string", "validation": "required" },
              "newPassword": { "type": "string", "validation": "required,min=12" }
            }
          }
        }
      ]
    },
    "admin": {
      "basePath": "/api/v2/admin",
      "requiredPermission": "admin:users",
      "endpoints": [
        {
          "method": "GET",
          "path": "/api/v2/admin/users",
          "handler": "AuthHandler.ListUsers",
          "queryParams": {
            "page": { "type": "int", "default": 1 },
            "limit": { "type": "int", "default": 10, "max": 100 }
          },
          "responses": {
            "200": {
              "users": "[models.User]",
              "pagination": {
                "page": "int",
                "limit": "int",
                "total": "int",
                "totalPages": "int"
              }
            }
          }
        },
        {
          "method": "POST",
          "path": "/api/v2/admin/users",
          "handler": "AuthHandler.CreateUser",
          "requestBody": {
            "type": "models.CreateUserRequest",
            "fields": {
              "email": { "type": "string", "validation": "required,email" },
              "firstName": { "type": "string", "validation": "required" },
              "lastName": { "type": "string", "validation": "required" },
              "password": { "type": "string", "validation": "required,min=12" },
              "roleIds": { "type": "[]uuid.UUID" }
            }
          },
          "responses": {
            "201": { "type": "models.User" },
            "409": { "type": "ErrorResponse", "description": "User already exists" }
          }
        },
        {
          "method": "GET",
          "path": "/api/v2/admin/users/:userId",
          "handler": "AuthHandler.GetUser",
          "pathParams": {
            "userId": { "type": "uuid", "required": true }
          }
        },
        {
          "method": "PUT",
          "path": "/api/v2/admin/users/:userId",
          "handler": "AuthHandler.UpdateUser",
          "pathParams": {
            "userId": { "type": "uuid", "required": true }
          },
          "requestBody": {
            "type": "models.UpdateUserRequest",
            "fields": {
              "firstName": { "type": "string", "optional": true },
              "lastName": { "type": "string", "optional": true },
              "isActive": { "type": "*bool", "optional": true },
              "roleIds": { "type": "[]uuid.UUID", "optional": true }
            }
          }
        },
        {
          "method": "DELETE",
          "path": "/api/v2/admin/users/:userId",
          "handler": "AuthHandler.DeleteUser",
          "pathParams": {
            "userId": { "type": "uuid", "required": true }
          }
        }
      ]
    },
    "personas": {
      "basePath": "/api/v2/personas",
      "endpoints": [
        {
          "method": "GET",
          "path": "/api/v2/personas",
          "handler": "APIHandler.ListAllPersonasGin",
          "requiredPermission": "personas:read",
          "queryParams": {
            "limit": { "type": "int", "default": 20 },
            "offset": { "type": "int", "default": 0 },
            "isEnabled": { "type": "bool", "optional": true },
            "personaType": { "type": "string", "enum": ["dns", "http"], "optional": true }
          }
        },
        {
          "method": "POST",
          "path": "/api/v2/personas",
          "handler": "APIHandler.CreatePersonaGin",
          "requiredPermission": "personas:create",
          "requestBody": {
            "type": "CreatePersonaRequest",
            "fields": {
              "name": { "type": "string", "validation": "required,min=1,max=255" },
              "personaType": { "type": "models.PersonaTypeEnum", "validation": "required,oneof=dns http" },
              "description": { "type": "string", "optional": true },
              "configDetails": { "type": "json.RawMessage", "validation": "required" },
              "isEnabled": { "type": "*bool", "optional": true }
            }
          }
        },
        {
          "method": "GET",
          "path": "/api/v2/personas/:id",
          "handler": "APIHandler.GetPersonaByIDGin",
          "requiredPermission": "personas:read",
          "pathParams": {
            "id": { "type": "uuid", "required": true }
          }
        },
        {
          "method": "PUT",
          "path": "/api/v2/personas/:id",
          "handler": "APIHandler.UpdatePersonaGin",
          "requiredPermission": "personas:update",
          "pathParams": {
            "id": { "type": "uuid", "required": true }
          },
          "requestBody": {
            "type": "UpdatePersonaRequest",
            "fields": {
              "name": { "type": "*string", "validation": "omitempty,min=1,max=255" },
              "description": { "type": "*string", "optional": true },
              "configDetails": { "type": "json.RawMessage", "optional": true },
              "isEnabled": { "type": "*bool", "optional": true }
            }
          }
        },
        {
          "method": "DELETE",
          "path": "/api/v2/personas/:id",
          "handler": "APIHandler.DeletePersonaGin",
          "requiredPermission": "personas:delete",
          "pathParams": {
            "id": { "type": "uuid", "required": true }
          },
          "responses": {
            "204": { "description": "No content" }
          }
        },
        {
          "method": "POST",
          "path": "/api/v2/personas/:id/test",
          "handler": "APIHandler.TestPersonaGin",
          "requiredPermission": "personas:read",
          "pathParams": {
            "id": { "type": "uuid", "required": true }
          }
        }
      ]
    },
    "proxies": {
      "basePath": "/api/v2/proxies",
      "endpoints": [
        {
          "method": "GET",
          "path": "/api/v2/proxies",
          "handler": "APIHandler.ListProxiesGin",
          "requiredPermission": "proxies:read",
          "queryParams": {
            "limit": { "type": "int", "default": 100 },
            "offset": { "type": "int", "default": 0 },
            "protocol": { "type": "models.ProxyProtocolEnum", "optional": true },
            "isEnabled": { "type": "bool", "optional": true },
            "isHealthy": { "type": "bool", "optional": true }
          }
        },
        {
          "method": "POST",
          "path": "/api/v2/proxies",
          "handler": "APIHandler.AddProxyGin",
          "requiredPermission": "proxies:create",
          "requestBody": {
            "type": "CreateProxyRequest",
            "fields": {
              "name": { "type": "string", "validation": "required,min=1,max=255" },
              "description": { "type": "string", "optional": true },
              "protocol": { "type": "models.ProxyProtocolEnum", "validation": "required,oneof=http https socks5 socks4" },
              "address": { "type": "string", "validation": "required,hostname_port" },
              "username": { "type": "string", "optional": true },
              "password": { "type": "string", "optional": true },
              "countryCode": { "type": "string", "optional": true },
              "isEnabled": { "type": "*bool", "optional": true }
            }
          }
        },
        {
          "method": "GET",
          "path": "/api/v2/proxies/status",
          "handler": "APIHandler.GetProxyStatusesGin",
          "requiredPermission": "proxies:read"
        },
        {
          "method": "PUT",
          "path": "/api/v2/proxies/:proxyId",
          "handler": "APIHandler.UpdateProxyGin",
          "requiredPermission": "proxies:update",
          "pathParams": {
            "proxyId": { "type": "uuid", "required": true }
          },
          "requestBody": {
            "type": "UpdateProxyRequest"
          }
        },
        {
          "method": "DELETE",
          "path": "/api/v2/proxies/:proxyId",
          "handler": "APIHandler.DeleteProxyGin",
          "requiredPermission": "proxies:delete",
          "pathParams": {
            "proxyId": { "type": "uuid", "required": true }
          }
        },
        {
          "method": "POST",
          "path": "/api/v2/proxies/:proxyId/test",
          "handler": "APIHandler.TestProxyGin",
          "requiredPermission": "proxies:read",
          "pathParams": {
            "proxyId": { "type": "uuid", "required": true }
          }
        },
        {
          "method": "POST",
          "path": "/api/v2/proxies/:proxyId/health-check",
          "handler": "APIHandler.ForceCheckSingleProxyGin",
          "requiredPermission": "proxies:read",
          "pathParams": {
            "proxyId": { "type": "uuid", "required": true }
          }
        },
        {
          "method": "POST",
          "path": "/api/v2/proxies/health-check",
          "handler": "APIHandler.ForceCheckAllProxiesGin",
          "requiredPermission": "proxies:read",
          "requestBody": {
            "ids": { "type": "[]string", "optional": true }
          }
        }
      ]
    },
    "keywords": {
      "basePath": "/api/v2/keywords/sets",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v2/keywords/sets",
          "handler": "APIHandler.CreateKeywordSetGin",
          "requiredPermission": "campaigns:create",
          "requestBody": {
            "type": "CreateKeywordSetRequest",
            "fields": {
              "name": { "type": "string", "validation": "required,min=1,max=255" },
              "description": { "type": "string", "optional": true },
              "isEnabled": { "type": "*bool", "optional": true },
              "rules": { "type": "[]KeywordRuleRequest", "validation": "omitempty,dive" }
            }
          }
        },
        {
          "method": "GET",
          "path": "/api/v2/keywords/sets",
          "handler": "APIHandler.ListKeywordSetsGin",
          "requiredPermission": "campaigns:read",
          "queryParams": {
            "limit": { "type": "int", "default": 20 },
            "offset": { "type": "int", "default": 0 },
            "includeRules": { "type": "bool", "default": false },
            "isEnabled": { "type": "bool", "optional": true }
          }
        },
        {
          "method": "GET",
          "path": "/api/v2/keywords/sets/:setId",
          "handler": "APIHandler.GetKeywordSetGin",
          "requiredPermission": "campaigns:read",
          "pathParams": {
            "setId": { "type": "uuid", "required": true }
          }
        },
        {
          "method": "PUT",
          "path": "/api/v2/keywords/sets/:setId",
          "handler": "APIHandler.UpdateKeywordSetGin",
          "requiredPermission": "campaigns:update",
          "pathParams": {
            "setId": { "type": "uuid", "required": true }
          },
          "requestBody": {
            "type": "UpdateKeywordSetRequest"
          }
        },
        {
          "method": "DELETE",
          "path": "/api/v2/keywords/sets/:setId",
          "handler": "APIHandler.DeleteKeywordSetGin",
          "requiredPermission": "campaigns:delete",
          "pathParams": {
            "setId": { "type": "uuid", "required": true }
          }
        }
      ]
    },
    "extraction": {
      "basePath": "/api/v2/extract/keywords",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v2/extract/keywords",
          "handler": "APIHandler.BatchExtractKeywordsGin",
          "requiredPermission": "campaigns:read",
          "requestBody": {
            "type": "BatchKeywordExtractionRequest",
            "fields": {
              "items": {
                "type": "[]KeywordExtractionRequestItem",
                "validation": "required,min=1,dive",
                "itemFields": {
                  "url": { "type": "string", "validation": "required,url" },
                  "httpPersonaId": { "type": "*string", "validation": "omitempty,uuid" },
                  "dnsPersonaId": { "type": "*string", "validation": "omitempty,uuid" },
                  "keywordSetId": { "type": "string", "validation": "required,uuid" }
                }
              }
            }
          }
        },
        {
          "method": "GET",
          "path": "/api/v2/extract/keywords/stream",
          "handler": "APIHandler.StreamExtractKeywordsGin",
          "requiredPermission": "campaigns:read",
          "queryParams": {
            "url": { "type": "string", "validation": "required,url" },
            "keywordSetId": { "type": "string", "validation": "required,uuid" },
            "httpPersonaId": { "type": "string", "validation": "uuid", "optional": true },
            "dnsPersonaId": { "type": "string", "validation": "uuid", "optional": true }
          },
          "responseType": "text/event-stream"
        }
      ]
    },
    "campaigns": {
      "basePath": "/api/v2/campaigns",
      "endpoints": [
        {
          "method": "POST",
          "path": "/api/v2/campaigns",
          "handler": "CampaignOrchestratorAPIHandler.createCampaign",
          "requiredPermission": "campaigns:create",
          "description": "Unified endpoint for creating all campaign types",
          "requestBody": {
            "type": "services.CreateCampaignRequest",
            "fields": {
              "name": { "type": "string", "validation": "required" },
              "campaignType": { "type": "string", "validation": "required", "enum": ["domain_generation", "dns_validation", "http_keyword_validation"] },
              "domainGenerationParams": { "type": "*services.DomainGenerationParams", "conditional": "required when campaignType=domain_generation" },
              "dnsValidationParams": { "type": "*services.DnsValidationParams", "conditional": "required when campaignType=dns_validation" },
              "httpKeywordParams": { "type": "*services.HttpKeywordParams", "conditional": "required when campaignType=http_keyword_validation" }
            }
          },
          "responses": {
            "201": { "type": "models.CampaignAPI" }
          }
        },
        {
          "method": "GET",
          "path": "/api/v2/campaigns",
          "handler": "CampaignOrchestratorAPIHandler.listCampaigns",
          "requiredPermission": "campaigns:read",
          "queryParams": {
            "limit": { "type": "int", "default": 20, "min": 1, "max": 100 },
            "offset": { "type": "int", "default": 0, "min": 0 },
            "type": { "type": "string", "enum": ["domain_generation", "dns_validation", "http_keyword_validation"], "optional": true },
            "status": { "type": "string", "enum": ["pending", "queued", "running", "pausing", "paused", "completed", "failed", "archived", "cancelled"], "optional": true }
          },
          "responses": {
            "200": {
              "type": "array",
              "items": "models.CampaignAPI",
              "headers": {
                "X-Total-Count": { "type": "string", "description": "Total number of campaigns" }
              }
            }
          }
        },
        {
          "method": "GET",
          "path": "/api/v2/campaigns/:campaignId",
          "handler": "CampaignOrchestratorAPIHandler.getCampaignDetails",
          "requiredPermission": "campaigns:read",
          "pathParams": {
            "campaignId": { "type": "uuid", "required": true }
          }
        },
        {
          "method": "POST",
          "path": "/api/v2/campaigns/:campaignId/start",
          "handler": "CampaignOrchestratorAPIHandler.startCampaign",
          "requiredPermission": "campaigns:execute",
          "pathParams": {
            "campaignId": { "type": "uuid", "required": true }
          }
        },
        {
          "method": "POST",
          "path": "/api/v2/campaigns/:campaignId/pause",
          "handler": "CampaignOrchestratorAPIHandler.pauseCampaign",
          "requiredPermission": "campaigns:execute",
          "pathParams": {
            "campaignId": { "type": "uuid", "required": true }
          }
        },
        {
          "method": "POST",
          "path": "/api/v2/campaigns/:campaignId/resume",
          "handler": "CampaignOrchestratorAPIHandler.resumeCampaign",
          "requiredPermission": "campaigns:execute",
          "pathParams": {
            "campaignId": { "type": "uuid", "required": true }
          }
        },
        {
          "method": "POST",
          "path": "/api/v2/campaigns/:campaignId/cancel",
          "handler": "CampaignOrchestratorAPIHandler.cancelCampaign",
          "requiredPermission": "campaigns:execute",
          "pathParams": {
            "campaignId": { "type": "uuid", "required": true }
          }
        },
        {
          "method": "DELETE",
          "path": "/api/v2/campaigns/:campaignId",
          "handler": "CampaignOrchestratorAPIHandler.deleteCampaign",
          "requiredPermission": "campaigns:delete",
          "pathParams": {
            "campaignId": { "type": "uuid", "required": true }
          }
        },
        {
          "method": "GET",
          "path": "/api/v2/campaigns/:campaignId/results/generated-domains",
          "handler": "CampaignOrchestratorAPIHandler.getGeneratedDomains",
          "requiredPermission": "campaigns:read",
          "pathParams": {
            "campaignId": { "type": "uuid", "required": true }
          },
          "queryParams": {
            "limit": { "type": "int", "default": 20 },
            "cursor": { "type": "int64", "default": 0 }
          }
        },
        {
          "method": "GET",
          "path": "/api/v2/campaigns/:campaignId/results/dns-validation",
          "handler": "CampaignOrchestratorAPIHandler.getDNSValidationResults",
          "requiredPermission": "campaigns:read",
          "pathParams": {
            "campaignId": { "type": "uuid", "required": true }
          },
          "queryParams": {
            "limit": { "type": "int", "default": 20 },
            "cursor": { "type": "string", "default": "" },
            "validationStatus": { "type": "string", "optional": true }
          }
        },
        {
          "method": "GET",
          "path": "/api/v2/campaigns/:campaignId/results/http-keyword",
          "handler": "CampaignOrchestratorAPIHandler.getHTTPKeywordResults",
          "requiredPermission": "campaigns:read",
          "pathParams": {
            "campaignId": { "type": "uuid", "required": true }
          },
          "queryParams": {
            "limit": { "type": "int", "default": 20 },
            "cursor": { "type": "string", "default": "" },
            "validationStatus": { "type": "string", "optional": true },
            "hasKeywords": { "type": "bool", "optional": true }
          }
        }
      ]
    },
    "configuration": {
      "basePath": "/api/v2/config",
      "requiredPermission": "system:config",
      "endpoints": [
        {
          "method": "GET",
          "path": "/api/v2/config/dns",
          "handler": "APIHandler.GetDNSConfigGin"
        },
        {
          "method": "POST",
          "path": "/api/v2/config/dns",
          "handler": "APIHandler.UpdateDNSConfigGin",
          "requestBody": {
            "type": "config.DNSValidatorConfigJSON"
          }
        },
        {
          "method": "GET",
          "path": "/api/v2/config/http",
          "handler": "APIHandler.GetHTTPConfigGin"
        },
        {
          "method": "POST",
          "path": "/api/v2/config/http",
          "handler": "APIHandler.UpdateHTTPConfigGin",
          "requestBody": {
            "type": "config.HTTPValidatorConfigJSON"
          }
        },
        {
          "method": "GET",
          "path": "/api/v2/config/logging",
          "handler": "APIHandler.GetLoggingConfigGin"
        },
        {
          "method": "POST",
          "path": "/api/v2/config/logging",
          "handler": "APIHandler.UpdateLoggingConfigGin",
          "requestBody": {
            "type": "config.LoggingConfig"
          }
        },
        {
          "method": "GET",
          "path": "/api/v2/config/server",
          "handler": "APIHandler.GetServerConfigGin"
        },
        {
          "method": "PUT",
          "path": "/api/v2/config/server",
          "handler": "APIHandler.UpdateServerConfigGin"
        }
      ]
    },
    "health": {
      "basePath": "/",
      "endpoints": [
        {
          "method": "GET",
          "path": "/health",
          "handler": "HealthCheckHandler.HandleHealthCheck",
          "auth": false
        },
        {
          "method": "GET",
          "path": "/health/ready",
          "handler": "HealthCheckHandler.HandleReadinessCheck",
          "auth": false
        },
        {
          "method": "GET",
          "path": "/health/live",
          "handler": "HealthCheckHandler.HandleLivenessCheck",
          "auth": false
        },
        {
          "method": "GET",
          "path": "/ping",
          "handler": "api.PingHandlerGin",
          "auth": false
        }
      ]
    },
    "websocket": {
      "basePath": "/api/v2",
      "endpoints": [
        {
          "method": "GET",
          "path": "/api/v2/ws",
          "handler": "WebSocketHandler.HandleConnections",
          "auth": true,
          "description": "WebSocket endpoint for real-time updates",
          "protocol": "ws/wss"
        },
        {
          "method": "GET",
          "path": "/api/v2/broadcast-test",
          "handler": "anonymous",
          "auth": true,
          "description": "Test endpoint for WebSocket broadcast"
        }
      ]
    },
    "documentation": {
      "basePath": "/",
      "endpoints": [
        {
          "method": "GET",
          "path": "/swagger/*any",
          "handler": "ginSwagger.WrapHandler",
          "auth": false,
          "description": "Swagger UI documentation"
        }
      ]
    }
  },
  "dataModels": {
    "auth": {
      "User": {
        "tableName": "auth.users",
        "fields": {
          "ID": { "type": "uuid.UUID", "db": "id", "json": "id" },
          "Email": { "type": "string", "db": "email", "json": "email" },
          "EmailVerified": { "type": "bool", "db": "email_verified", "json": "emailVerified" },
          "EmailVerificationToken": { "type": "*string", "db": "email_verification_token", "json": "-" },
          "EmailVerificationExpires": { "type": "*time.Time", "db": "email_verification_expires_at", "json": "-" },
          "PasswordHash": { "type": "string", "db": "password_hash", "json": "-" },
          "PasswordPepperVersion": { "type": "int", "db": "password_pepper_version", "json": "-" },
          "FirstName": { "type": "string", "db": "first_name", "json": "firstName" },
          "LastName": { "type": "string", "db": "last_name", "json": "lastName" },
          "AvatarURL": { "type": "*string", "db": "avatar_url", "json": "avatarUrl" },
          "IsActive": { "type": "bool", "db": "is_active", "json": "isActive" },
          "IsLocked": { "type": "bool", "db": "is_locked", "json": "isLocked" },
          "FailedLoginAttempts": { "type": "int", "db": "failed_login_attempts", "json": "-" },
          "LockedUntil": { "type": "*time.Time", "db": "locked_until", "json": "-" },
          "LastLoginAt": { "type": "*time.Time", "db": "last_login_at", "json": "lastLoginAt" },
          "LastLoginIP": { "type": "*net.IP", "db": "last_login_ip", "json": "lastLoginIp" },
          "PasswordChangedAt": { "type": "time.Time", "db": "password_changed_at", "json": "-" },
          "MustChangePassword": { "type": "bool", "db": "must_change_password", "json": "mustChangePassword" },
          "MFAEnabled": { "type": "bool", "db": "mfa_enabled", "json": "mfaEnabled" },
          "MFASecretEncrypted": { "type": "*[]byte", "db": "mfa_secret_encrypted", "json": "-" },
          "MFABackupCodesEncrypted": { "type": "*[]byte", "db": "mfa_backup_codes_encrypted", "json": "-" },
          "MFALastUsedAt": { "type": "*time.Time", "db": "mfa_last_used_at", "json": "mfaLastUsedAt" },
          "EncryptedFields": { "type": "*string", "db": "encrypted_fields", "json": "-" },
          "SecurityQuestionsEncrypted": { "type": "*[]byte", "db": "security_questions_encrypted", "json": "-" },
          "CreatedAt": { "type": "time.Time", "db": "created_at", "json": "createdAt" },
          "UpdatedAt": { "type": "time.Time", "db": "updated_at", "json": "updatedAt" }
        }
      },
      "Session": {
        "tableName": "auth.sessions",
        "fields": {
          "ID": { "type": "string", "db": "id", "json": "id" },
          "UserID": { "type": "uuid.UUID", "db": "user_id", "json": "userId" },
          "IPAddress": { "type": "*string", "db": "ip_address", "json": "ipAddress" },
          "UserAgent": { "type": "*string", "db": "user_agent", "json": "userAgent" },
          "UserAgentHash": { "type": "*string", "db": "user_agent_hash", "json": "userAgentHash" },
          "SessionFingerprint": { "type": "*string", "db": "session_fingerprint", "json": "sessionFingerprint" },
          "BrowserFingerprint": { "type": "*string", "db": "browser_fingerprint", "json": "browserFingerprint" },
          "ScreenResolution": { "type": "*string", "db": "screen_resolution", "json": "screenResolution" },
          "IsActive": { "type": "bool", "db": "is_active", "json": "isActive" },
          "ExpiresAt": { "type": "time.Time", "db": "expires_at", "json": "expiresAt" },
          "LastActivityAt": { "type": "time.Time", "db": "last_activity_at", "json": "lastActivityAt" },
          "CreatedAt": { "type": "time.Time", "db": "created_at", "json": "createdAt" }
        }
      },
      "Role": {
        "tableName": "auth.roles",
        "fields": {
          "ID": { "type": "uuid.UUID", "db": "id", "json": "id" },
          "Name": { "type": "string", "db": "name", "json": "name" },
          "DisplayName": { "type": "string", "db": "display_name", "json": "displayName" },
          "Description": { "type": "*string", "db": "description", "json": "description" },
          "IsSystemRole": { "type": "bool", "db": "is_system_role", "json": "isSystemRole" },
          "CreatedAt": { "type": "time.Time", "db": "created_at", "json": "createdAt" },
          "UpdatedAt": { "type": "time.Time", "db": "updated_at", "json": "updatedAt" }
        }
      },
      "Permission": {
        "tableName": "auth.permissions",
        "fields": {
          "ID": { "type": "uuid.UUID", "db": "id", "json": "id" },
          "Name": { "type": "string", "db": "name", "json": "name" },
          "DisplayName": { "type": "string", "db": "display_name", "json": "displayName" },
          "Description": { "type": "*string", "db": "description", "json": "description" },
          "Resource": { "type": "string", "db": "resource", "json": "resource" },
          "Action": { "type": "string", "db": "action", "json": "action" },
          "CreatedAt": { "type": "time.Time", "db": "created_at", "json": "createdAt" }
        }
      }
    },
    "core": {
      "Campaign": {
        "tableName": "campaigns",
        "fields": {
          "ID": { "type": "uuid.UUID", "db": "id", "json": "id" },
          "Name": { "type": "string", "db": "name", "json": "name", "validation": "required" },
          "CampaignType": { "type": "CampaignTypeEnum", "db": "campaign_type", "json": "campaignType", "validation": "required" },
          "Status": { "type": "CampaignStatusEnum", "db": "status", "json": "status", "validation": "required" },
          "UserID": { "type": "*uuid.UUID", "db": "user_id", "json": "userId,omitempty" },
          "CreatedAt": { "type": "time.Time", "db": "created_at", "json": "createdAt" },
          "UpdatedAt": { "type": "time.Time", "db": "updated_at", "json": "updatedAt" },
          "StartedAt": { "type": "*time.Time", "db": "started_at", "json": "startedAt,omitempty" },
          "CompletedAt": { "type": "*time.Time", "db": "completed_at", "json": "completedAt,omitempty" },
          "ProgressPercentage": { "type": "*float64", "db": "progress_percentage", "json": "progressPercentage,omitempty", "validation": "omitempty,gte=0,lte=100" },
          "TotalItems": { "type": "*int64", "db": "total_items", "json": "totalItems,omitempty", "validation": "omitempty,gte=0" },
          "ProcessedItems": { "type": "*int64", "db": "processed_items", "json": "processedItems,omitempty", "validation": "omitempty,gte=0" },
          "ErrorMessage": { "type": "*string", "db": "error_message", "json": "errorMessage,omitempty" },
          "SuccessfulItems": { "type": "*int64", "db": "successful_items", "json": "successfulItems,omitempty" },
          "FailedItems": { "type": "*int64", "db": "failed_items", "json": "failedItems,omitempty" },
          "Metadata": { "type": "*json.RawMessage", "db": "metadata", "json": "metadata,omitempty" },
          "EstimatedCompletionAt": { "type": "*time.Time", "db": "estimated_completion_at", "json": "estimatedCompletionAt,omitempty" },
          "AvgProcessingRate": { "type": "*float64", "db": "avg_processing_rate", "json": "avgProcessingRate,omitempty" },
          "LastHeartbeatAt": { "type": "*time.Time", "db": "last_heartbeat_at", "json": "lastHeartbeatAt,omitempty" }
        }
      },
      "Persona": {
        "tableName": "personas",
        "fields": {
          "ID": { "type": "uuid.UUID", "db": "id", "json": "id" },
          "Name": { "type": "string", "db": "name", "json": "name", "validation": "required" },
          "PersonaType": { "type": "PersonaTypeEnum", "db": "persona_type", "json": "personaType", "validation": "required,oneof=dns http" },
          "Description": { "type": "sql.NullString", "db": "description", "json": "description,omitempty" },
          "ConfigDetails": { "type": "json.RawMessage", "db": "config_details", "json": "configDetails", "validation": "required" },
          "IsEnabled": { "type": "bool", "db": "is_enabled", "json": "isEnabled" },
          "CreatedAt": { "type": "time.Time", "db": "created_at", "json": "createdAt" },
          "UpdatedAt": { "type": "time.Time", "db": "updated_at", "json": "updatedAt" }
        }
      },
      "Proxy": {
        "tableName": "proxies",
        "fields": {
          "ID": { "type": "uuid.UUID", "db": "id", "json": "id" },
          "Name": { "type": "string", "db": "name", "json": "name", "validation": "required" },
          "Description": { "type": "sql.NullString", "db": "description", "json": "description,omitempty" },
          "Address": { "type": "string", "db": "address", "json": "address", "validation": "required" },
          "Protocol": { "type": "*ProxyProtocolEnum", "db": "protocol", "json": "protocol,omitempty" },
          "Username": { "type": "sql.NullString", "db": "username", "json": "username,omitempty" },
          "PasswordHash": { "type": "sql.NullString", "db": "password_hash", "json": "-" },
          "Host": { "type": "sql.NullString", "db": "host", "json": "host,omitempty" },
          "Port": { "type": "sql.NullInt32", "db": "port", "json": "port,omitempty" },
          "IsEnabled": { "type": "bool", "db": "is_enabled", "json": "isEnabled" },
          "IsHealthy": { "type": "bool", "db": "is_healthy", "json": "isHealthy" },
          "LastStatus": { "type": "sql.NullString", "db": "last_status", "json": "lastStatus,omitempty" },
          "LastCheckedAt": { "type": "sql.NullTime", "db": "last_checked_at", "json": "lastCheckedAt,omitempty" },
          "LatencyMs": { "type": "sql.NullInt32", "db": "latency_ms", "json": "latencyMs,omitempty" },
          "City": { "type": "sql.NullString", "db": "city", "json": "city,omitempty" },
          "CountryCode": { "type": "sql.NullString", "db": "country_code", "json": "countryCode,omitempty" },
          "Provider": { "type": "sql.NullString", "db": "provider", "json": "provider,omitempty" },
          "CreatedAt": { "type": "time.Time", "db": "created_at", "json": "createdAt" },
          "UpdatedAt": { "type": "time.Time", "db": "updated_at", "json": "updatedAt" }
        }
      },
      "KeywordSet": {
        "tableName": "keyword_sets",
        "fields": {
          "ID": { "type": "uuid.UUID", "db": "id", "json": "id" },
          "Name": { "type": "string", "db": "name", "json": "name", "validation": "required" },
          "Description": { "type": "sql.NullString", "db": "description", "json": "description,omitempty" },
          "IsEnabled": { "type": "bool", "db": "is_enabled", "json": "isEnabled" },
          "CreatedAt": { "type": "time.Time", "db": "created_at", "json": "createdAt" },
          "UpdatedAt": { "type": "time.Time", "db": "updated_at", "json": "updatedAt" },
          "Rules": { "type": "*[]KeywordRule", "db": "rules", "json": "rules,omitempty" }
        }
      },
      "KeywordRule": {
        "tableName": "keyword_rules",
        "fields": {
          "ID": { "type": "uuid.UUID", "db": "id", "json": "id" },
          "KeywordSetID": { "type": "uuid.UUID", "db": "keyword_set_id", "json": "keywordSetId,omitempty" },
          "Pattern": { "type": "string", "db": "pattern", "json": "pattern", "validation": "required" },
          "RuleType": { "type": "KeywordRuleTypeEnum", "db": "rule_type", "json": "ruleType", "validation": "required,oneof=string regex" },
          "IsCaseSensitive": { "type": "bool", "db": "is_case_sensitive", "json": "isCaseSensitive" },
          "Category": { "type": "sql.NullString", "db": "category", "json": "category,omitempty" },
          "ContextChars": { "type": "int", "db": "context_chars", "json": "contextChars,omitempty", "validation": "gte=0" },
          "CreatedAt": { "type": "time.Time", "db": "created_at", "json": "createdAt" },
          "UpdatedAt": { "type": "time.Time", "db": "updated_at", "json": "updatedAt" }
        }
      },
      "GeneratedDomain": {
        "tableName": "generated_domains",
        "fields": {
          "ID": { "type": "uuid.UUID", "db": "id", "json": "id" },
          "GenerationCampaignID": { "type": "uuid.UUID", "db": "domain_generation_campaign_id", "json": "generationCampaignId", "validation": "required" },
          "DomainName": { "type": "string", "db": "domain_name", "json": "domainName", "validation": "required,hostname_rfc1123" },
          "OffsetIndex": { "type": "int64", "db": "offset_index", "json": "offsetIndex", "validation": "gte=0" },
          "GeneratedAt": { "type": "time.Time", "db": "generated_at", "json": "generatedAt" },
          "SourceKeyword": { "type": "sql.NullString", "db": "source_keyword", "json": "sourceKeyword,omitempty" },
          "SourcePattern": { "type": "sql.NullString", "db": "source_pattern", "json": "sourcePattern,omitempty" },
          "TLD": { "type": "sql.NullString", "db": "tld", "json": "tld,omitempty" },
          "CreatedAt": { "type": "time.Time", "db": "created_at", "json": "createdAt" }
        }
      },
      "DNSValidationResult": {
        "tableName": "dns_validation_results",
        "fields": {
          "ID": { "type": "uuid.UUID", "db": "id", "json": "id" },
          "DNSCampaignID": { "type": "uuid.UUID", "db": "dns_campaign_id", "json": "dnsCampaignId", "validation": "required" },
          "GeneratedDomainID": { "type": "uuid.NullUUID", "db": "generated_domain_id", "json": "generatedDomainId,omitempty" },
          "DomainName": { "type": "string", "db": "domain_name", "json": "domainName", "validation": "required" },
          "ValidationStatus": { "type": "string", "db": "validation_status", "json": "validationStatus", "validation": "required" },
          "DNSRecords": { "type": "*json.RawMessage", "db": "dns_records", "json": "dnsRecords,omitempty" },
          "ValidatedByPersonaID": { "type": "uuid.NullUUID", "db": "validated_by_persona_id", "json": "validatedByPersonaId,omitempty" },
          "Attempts": { "type": "*int", "db": "attempts", "json": "attempts,omitempty", "validation": "omitempty,gte=0" },
          "LastCheckedAt": { "type": "*time.Time", "db": "last_checked_at", "json": "lastCheckedAt,omitempty" },
          "CreatedAt": { "type": "time.Time", "db": "created_at", "json": "createdAt" }
        }
      },
      "HTTPKeywordResult": {
        "tableName": "http_keyword_results",
        "fields": {
          "ID": { "type": "uuid.UUID", "db": "id", "json": "id" },
          "HTTPKeywordCampaignID": { "type": "uuid.UUID", "db": "http_keyword_campaign_id", "json": "httpKeywordCampaignId", "validation": "required" },
          "DNSResultID": { "type": "uuid.NullUUID", "db": "dns_result_id", "json": "dnsResultId,omitempty" },
          "DomainName": { "type": "string", "db": "domain_name", "json": "domainName", "validation": "required" },
          "ValidationStatus": { "type": "string", "db": "validation_status", "json": "validationStatus", "validation": "required" },
          "HTTPStatusCode": { "type": "*int32", "db": "http_status_code", "json": "httpStatusCode,omitempty" },
          "ResponseHeaders": { "type": "*json.RawMessage", "db": "response_headers", "json": "responseHeaders,omitempty" },
          "PageTitle": { "type": "*string", "db": "page_title", "json": "pageTitle,omitempty" },
          "ExtractedContentSnippet": { "type": "*string", "db": "extracted_content_snippet", "json": "extractedContentSnippet,omitempty" },
          "FoundKeywordsFromSets": { "type": "*json.RawMessage", "db": "found_keywords_from_sets", "json": "foundKeywordsFromSets,omitempty" },
          "FoundAdHocKeywords": { "type": "*[]string", "db": "found_ad_hoc_keywords", "json": "foundAdHocKeywords,omitempty" },
          "ContentHash": { "type": "*string", "db": "content_hash", "json": "contentHash,omitempty" },
          "ValidatedByPersonaID": { "type": "uuid.NullUUID", "db": "validated_by_persona_id", "json": "validatedByPersonaId,omitempty" },
          "UsedProxyID": { "type": "uuid.NullUUID", "db": "used_proxy_id", "json": "usedProxyId,omitempty" },
          "Attempts": { "type": "*int", "db": "attempts", "json": "attempts,omitempty", "validation": "omitempty,gte=0" },
          "LastCheckedAt": { "type": "*time.Time", "db": "last_checked_at", "json": "lastCheckedAt,omitempty" },
          "CreatedAt": { "type": "time.Time", "db": "created_at", "json": "createdAt" }
        }
      },
      "CampaignJob": {
        "tableName": "campaign_jobs",
        "fields": {
          "ID": { "type": "uuid.UUID", "db": "id", "json": "id" },
          "CampaignID": { "type": "uuid.UUID", "db": "campaign_id", "json": "campaignId" },
          "JobType": { "type": "CampaignTypeEnum", "db": "job_type", "json": "jobType" },
          "Status": { "type": "CampaignJobStatusEnum", "db": "status", "json": "status" },
          "ScheduledAt": { "type": "time.Time", "db": "scheduled_at", "json": "scheduledAt" },
          "JobPayload": { "type": "*json.RawMessage", "db": "job_payload", "json": "jobPayload,omitempty" },
          "Attempts": { "type": "int", "db": "attempts", "json": "attempts" },
          "MaxAttempts": { "type": "int", "db": "max_attempts", "json": "maxAttempts" },
          "LastError": { "type": "sql.NullString", "db": "last_error", "json": "lastError,omitempty" },
          "LastAttemptedAt": { "type": "sql.NullTime", "db": "last_attempted_at", "json": "lastAttemptedAt,omitempty" },
          "ProcessingServerID": { "type": "sql.NullString", "db": "processing_server_id", "json": "processingServerId,omitempty" },
          "CreatedAt": { "type": "time.Time", "db": "created_at", "json": "createdAt" },
          "UpdatedAt": { "type": "time.Time", "db": "updated_at", "json": "updatedAt" },
          "NextExecutionAt": { "type": "sql.NullTime", "db": "next_execution_at", "json": "nextExecutionAt,omitempty" },
          "LockedAt": { "type": "sql.NullTime", "db": "locked_at", "json": "lockedAt,omitempty" },
          "LockedBy": { "type": "sql.NullString", "db": "locked_by", "json": "lockedBy,omitempty" }
        }
      },
      "AuditLog": {
        "tableName": "audit_logs",
        "fields": {
          "ID": { "type": "uuid.UUID", "db": "id", "json": "id" },
          "Timestamp": { "type": "time.Time", "db": "timestamp", "json": "timestamp" },
          "UserID": { "type": "uuid.NullUUID", "db": "user_id", "json": "userId,omitempty" },
          "Action": { "type": "string", "db": "action", "json": "action", "validation": "required" },
          "EntityType": { "type": "sql.NullString", "db": "entity_type", "json": "entityType,omitempty" },
          "EntityID": { "type": "uuid.NullUUID", "db": "entity_id", "json": "entityId,omitempty" },
          "Details": { "type": "*json.RawMessage", "db": "details", "json": "details,omitempty" },
          "ClientIP": { "type": "sql.NullString", "db": "client_ip", "json": "clientIp,omitempty" },
          "UserAgent": { "type": "sql.NullString", "db": "user_agent", "json": "userAgent,omitempty" }
        }
      }
    },
    "campaign_params": {
      "DomainGenerationCampaignParams": {
        "tableName": "domain_generation_campaign_params",
        "fields": {
          "CampaignID": { "type": "uuid.UUID", "db": "campaign_id", "json": "-" },
          "PatternType": { "type": "string", "db": "pattern_type", "json": "patternType", "validation": "required,oneof=prefix suffix both" },
          "VariableLength": { "type": "*int", "db": "variable_length", "json": "variableLength,omitempty", "validation": "omitempty,gt=0" },
          "CharacterSet": { "type": "*string", "db": "character_set", "json": "characterSet,omitempty" },
          "ConstantString": { "type": "*string", "db": "constant_string", "json": "constantString,omitempty" },
          "TLD": { "type": "string", "db": "tld", "json": "tld", "validation": "required" },
          "NumDomainsToGenerate": { "type": "int", "db": "num_domains_to_generate", "json": "numDomainsToGenerate", "validation": "required,gt=0" },
          "TotalPossibleCombinations": { "type": "int64", "db": "total_possible_combinations", "json": "totalPossibleCombinations", "validation": "required,gt=0" },
          "CurrentOffset": { "type": "int64", "db": "current_offset", "json": "currentOffset", "validation": "gte=0" }
        }
      },
      "DNSValidationCampaignParams": {
        "tableName": "dns_validation_campaign_params",
        "fields": {
          "CampaignID": { "type": "uuid.UUID", "db": "campaign_id", "json": "-" },
          "SourceGenerationCampaignID": { "type": "*uuid.UUID", "db": "source_generation_campaign_id", "json": "sourceGenerationCampaignId,omitempty", "validation": "omitempty,uuid" },
          "PersonaIDs": { "type": "[]uuid.UUID", "db": "persona_ids", "json": "personaIds", "validation": "required,min=1,dive,uuid" },
          "RotationIntervalSeconds": { "type": "*int", "db": "rotation_interval_seconds", "json": "rotationIntervalSeconds,omitempty", "validation": "omitempty,gte=0" },
          "ProcessingSpeedPerMinute": { "type": "*int", "db": "processing_speed_per_minute", "json": "processingSpeedPerMinute,omitempty", "validation": "omitempty,gte=0" },
          "BatchSize": { "type": "*int", "db": "batch_size", "json": "batchSize,omitempty", "validation": "omitempty,gt=0" },
          "RetryAttempts": { "type": "*int", "db": "retry_attempts", "json": "retryAttempts,omitempty", "validation": "omitempty,gte=0" },
          "Metadata": { "type": "*json.RawMessage", "db": "metadata", "json": "metadata,omitempty" }
        }
      },
      "HTTPKeywordCampaignParams": {
        "tableName": "http_keyword_campaign_params",
        "fields": {
          "CampaignID": { "type": "uuid.UUID", "db": "campaign_id", "json": "-" },
          "SourceCampaignID": { "type": "uuid.UUID", "db": "source_campaign_id", "json": "sourceCampaignId", "validation": "required" },
          "SourceType": { "type": "string", "db": "source_type", "json": "sourceType", "validation": "required" },
          "KeywordSetIDs": { "type": "[]uuid.UUID", "db": "keyword_set_ids", "json": "keywordSetIds,omitempty" },
          "AdHocKeywords": { "type": "*[]string", "db": "ad_hoc_keywords", "json": "adHocKeywords,omitempty" },
          "PersonaIDs": { "type": "[]uuid.UUID", "db": "persona_ids", "json": "personaIds", "validation": "required,min=1,dive,uuid" },
          "ProxyIDs": { "type": "*[]uuid.UUID", "db": "proxy_ids", "json": "proxyIds,omitempty" },
          "ProxyPoolID": { "type": "uuid.NullUUID", "db": "proxy_pool_id", "json": "proxyPoolId,omitempty" },
          "ProxySelectionStrategy": { "type": "*string", "db": "proxy_selection_strategy", "json": "proxySelectionStrategy,omitempty" },
          "RotationIntervalSeconds": { "type": "*int", "db": "rotation_interval_seconds", "json": "rotationIntervalSeconds,omitempty", "validation": "omitempty,gte=0" },
          "ProcessingSpeedPerMinute": { "type": "*int", "db": "processing_speed_per_minute", "json": "processingSpeedPerMinute,omitempty", "validation": "omitempty,gte=0" },
          "BatchSize": { "type": "*int", "db": "batch_size", "json": "batchSize,omitempty", "validation": "omitempty,gt=0" },
          "RetryAttempts": { "type": "*int", "db": "retry_attempts", "json": "retryAttempts,omitempty", "validation": "omitempty,gte=0" },
          "TargetHTTPPorts": { "type": "*[]int", "db": "target_http_ports", "json": "targetHttpPorts,omitempty" },
          "LastProcessedDomainName": { "type": "*string", "db": "last_processed_domain_name", "json": "lastProcessedDomainName,omitempty" },
          "Metadata": { "type": "*json.RawMessage", "db": "metadata", "json": "metadata,omitempty" }
        }
      }
    }
  },
  "enums": {
    "CampaignTypeEnum": {
      "values": ["domain_generation", "dns_validation", "http_keyword_validation"]
    },
    "CampaignStatusEnum": {
      "values": ["pending", "queued", "running", "pausing", "paused", "completed", "failed", "archived", "cancelled"]
    },
    "PersonaTypeEnum": {
      "values": ["dns", "http"]
    },
    "ProxyProtocolEnum": {
      "values": ["http", "https", "socks5", "socks4"]
    },
    "KeywordRuleTypeEnum": {
      "values": ["string", "regex"]
    },
    "CampaignJobStatusEnum": {
      "values": ["pending", "queued", "running", "processing", "completed", "failed", "retry"]
    },
    "ValidationStatusEnum": {
      "values": ["pending", "valid", "invalid", "error", "skipped"]
    },
    "DNSValidationStatusEnum": {
      "values": ["resolved", "unresolved", "timeout", "error"]
    },
    "HTTPValidationStatusEnum": {
      "values": ["success", "failed", "timeout", "error"]
    }
  },
  "middleware": {
    "authentication": {
      "SessionAuth": {
        "description": "Session-based authentication using HTTP cookies",
        "cookieName": "session_id",
        "implementation": "middleware.AuthMiddleware.SessionAuth()"
      },
      "RequirePermission": {
        "description": "Permission-based access control",
        "implementation": "middleware.AuthMiddleware.RequirePermission(permission string)"
      }
    },
    "security": {
      "SecurityHeaders": {
        "description": "Apply security headers to all responses",
        "headers": [
          "X-Content-Type-Options: nosniff",
          "X-Frame-Options: DENY",
          "X-XSS-Protection: 1; mode=block",
          "Strict-Transport-Security: max-age=31536000"
        ]
      },
      "EnhancedCORS": {
        "description": "Enhanced CORS configuration",
        "allowedOrigins": ["configured dynamically"],
        "allowedMethods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
        "allowedHeaders": ["Content-Type", "Authorization"],
        "credentials": true
      },
      "RequestSizeLimit": {
        "description": "Limit request body size",
        "maxSize": "10MB",
        "excludedPaths": ["/api/v2/ws"]
      },
      "SessionProtection": {
        "description": "Additional session security measures"
      }
    },
    "rateLimit": {
      "IPRateLimit": {
        "description": "Rate limiting per IP address",
        "default": "100 requests per minute"
      },
      "LoginRateLimit": {
        "description": "Specific rate limiting for login endpoint",
        "implementation": "rateLimitMiddleware.LoginRateLimit()"
      }
    },
    "validation": {
      "ValidateRequestMiddleware": {
        "description": "Validate incoming request structure"
      },
      "ValidateResponseMiddleware": {
        "description": "Validate outgoing response structure"
      }
    }
  },
  "websocketMessages": {
    "standardFormat": {
      "type": "string",
      "timestamp": "time.Time",
      "data": "json.RawMessage"
    },
    "messageTypes": [
      {
        "type": "campaign.progress",
        "payload": "CampaignProgressPayload",
        "fields": {
          "campaignId": "string",
          "totalItems": "int64",
          "processedItems": "int64",
          "successfulItems": "int64",
          "failedItems": "int64",
          "progressPercent": "float64",
          "phase": "string",
          "status": "string"
        }
      },
      {
        "type": "campaign.status",
        "payload": "CampaignStatusPayload",
        "fields": {
          "campaignId": "string",
          "status": "string",
          "phase": "string (optional)",
          "message": "string (optional)",
          "errorCode": "string (optional)"
        }
      },
      {
        "type": "domain.generated",
        "payload": "DomainGenerationPayload",
        "fields": {
          "campaignId": "string",
          "domainId": "string",
          "domain": "string",
          "offset": "int64",
          "batchSize": "int",
          "totalGenerated": "int64"
        }
      },
      {
        "type": "dns.validation.result",
        "payload": "DNSValidationPayload",
        "fields": {
          "campaignId": "string",
          "domainId": "string",
          "domain": "string",
          "validationStatus": "string",
          "dnsRecords": "map[string]interface{} (optional)",
          "attempts": "int",
          "processingTime": "int64 (milliseconds)",
          "totalValidated": "int64"
        }
      },
      {
        "type": "http.validation.result",
        "payload": "HTTPValidationPayload",
        "fields": {
          "campaignId": "string",
          "domainId": "string",
          "domain": "string",
          "validationStatus": "string",
          "httpStatus": "int (optional)",
          "keywords": "[]string (optional)",
          "content": "string (optional)",
          "headers": "map[string]interface{} (optional)",
          "processingTime": "int64 (milliseconds)",
          "totalValidated": "int64"
        }
      },
      {
        "type": "system.notification",
        "payload": "SystemNotificationPayload",
        "fields": {
          "level": "string (info, warning, error)",
          "message": "string",
          "category": "string (optional)",
          "actionable": "bool (optional)"
        }
      },
      {
        "type": "proxy.status",
        "payload": "ProxyStatusPayload",
        "fields": {
          "proxyId": "string",
          "status": "string",
          "campaignId": "string (optional)",
          "health": "string (optional)",
          "responseTime": "int64 (milliseconds, optional)"
        }
      }
    ]
  },
  "configuration": {
    "appConfig": {
      "server": {
        "port": "string",
        "apiKey": "string",
        "streamChunkSize": "int",
        "ginMode": "string",
        "dbMaxOpenConns": "int",
        "dbMaxIdleConns": "int",
        "dbConnMaxLifetimeMinutes": "int",
        "database": "DatabaseConfig (optional)",
        "auth": "AuthConfig (optional)"
      },
      "worker": {
        "numWorkers": "int",
        "pollIntervalSeconds": "int",
        "errorRetryDelaySeconds": "int",
        "maxJobRetries": "int",
        "jobProcessingTimeoutMinutes": "int",
        "dnsSubtaskConcurrency": "int",
        "httpKeywordSubtaskConcurrency": "int"
      },
      "dnsValidator": {
        "resolvers": "[]string",
        "useSystemResolvers": "bool",
        "queryTimeoutSeconds": "int",
        "maxDomainsPerRequest": "int",
        "resolverStrategy": "string",
        "resolversWeighted": "map[string]int",
        "resolversPreferredOrder": "[]string",
        "concurrentQueriesPerDomain": "int",
        "queryDelayMinMs": "int",
        "queryDelayMaxMs": "int",
        "maxConcurrentGoroutines": "int",
        "rateLimitDps": "float64",
        "rateLimitBurst": "int"
      },
      "httpValidator": {
        "defaultUserAgent": "string",
        "userAgents": "[]string",
        "defaultHeaders": "map[string]string",
        "requestTimeoutSeconds": "int",
        "maxRedirects": "int",
        "followRedirects": "bool",
        "maxDomainsPerRequest": "int",
        "allowInsecureTLS": "bool",
        "maxConcurrentGoroutines": "int",
        "rateLimitDps": "float64",
        "rateLimitBurst": "int",
        "maxBodyReadBytes": "int64"
      },
      "logging": {
        "level": "string"
      }
    },
    "personaConfigs": {
      "dnsConfig": {
        "resolvers": "[]string",
        "useSystemResolvers": "bool",
        "queryTimeoutSeconds": "int",
        "maxDomainsPerRequest": "int",
        "resolverStrategy": "string (random_rotation, sequential_failover, specific_order, weighted_rotation)",
        "resolversWeighted": "map[string]int",
        "resolversPreferredOrder": "[]string",
        "concurrentQueriesPerDomain": "int",
        "queryDelayMinMs": "int",
        "queryDelayMaxMs": "int",
        "maxConcurrentGoroutines": "int",
        "rateLimitDps": "float64",
        "rateLimitBurst": "int"
      },
      "httpConfig": {
        "userAgent": "string",
        "headers": "map[string]string",
        "headerOrder": "[]string",
        "tlsClientHello": {
          "minVersion": "string (TLS10, TLS11, TLS12, TLS13)",
          "maxVersion": "string (TLS10, TLS11, TLS12, TLS13)",
          "cipherSuites": "[]string",
          "curvePreferences": "[]string"
        },
        "http2Settings": {
          "enabled": "bool"
        },
        "cookieHandling": {
          "mode": "string (session, none, ignore)"
        },
        "requestTimeoutSeconds": "int",
        "followRedirects": "bool",
        "allowedStatusCodes": "[]int",
        "rateLimitDps": "float64",
        "rateLimitBurst": "int",
        "notes": "string"
      }
    }
  },
  "permissions": [
    "personas:create",
    "personas:read",
    "personas:update",
    "personas:delete",
    "proxies:create",
    "proxies:read",
    "proxies:update",
    "proxies:delete",
    "campaigns:create",
    "campaigns:read",
    "campaigns:update",
    "campaigns:delete",
    "campaigns:execute",
    "system:config",
    "admin:users",
    "admin:roles",
    "admin:system"
  ],
  "errorCodes": {
    "clientErrors": {
      "BAD_REQUEST": "Invalid request format or parameters",
      "UNAUTHORIZED": "Authentication required",
      "FORBIDDEN": "Insufficient permissions",
      "NOT_FOUND": "Resource not found",
      "CONFLICT": "Resource conflict",
      "VALIDATION_ERROR": "Request validation failed",
      "RATE_LIMIT_EXCEEDED": "Too many requests",
      "REQUEST_TIMEOUT": "Request timeout"
    },
    "serverErrors": {
      "INTERNAL_SERVER_ERROR": "Internal server error",
      "DATABASE_ERROR": "Database operation failed",
      "SERVICE_UNAVAILABLE": "Service temporarily unavailable",
      "GATEWAY_TIMEOUT": "Gateway timeout"
    },
    "businessErrors": {
      "CAMPAIGN_IN_PROGRESS": "Campaign already in progress",
      "QUOTA_EXCEEDED": "Quota exceeded",
      "INVALID_STATE": "Invalid state for operation"
    }
  }
}