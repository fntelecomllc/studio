/* tslint:disable */
/* eslint-disable */
/**
 * DomainFlow API
 * DomainFlow API for domain generation, validation, and campaign management
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@domainflow.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ErrorResponse } from '../models';
// @ts-ignore
import type { ModelsCampaignAPI } from '../models';
// @ts-ignore
import type { ServicesCreateCampaignRequest } from '../models';
/**
 * CampaignsApi - axios parameter creator
 * @export
 */
export const CampaignsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieve a list of campaigns with optional filtering and pagination
         * @summary List campaigns
         * @param {number} [limit] Maximum number of campaigns to return (1-100)
         * @param {number} [offset] Number of campaigns to skip
         * @param {CampaignsGetTypeEnum} [type] Filter by campaign type
         * @param {CampaignsGetStatusEnum} [status] Filter by campaign status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignsGet: async (limit?: number, offset?: number, type?: CampaignsGetTypeEnum, status?: CampaignsGetStatusEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/campaigns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...(baseOptions as Record<string, unknown> || {}), ...(options || {})};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SessionAuth required

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = (baseOptions && (baseOptions as Record<string, unknown>).headers ? (baseOptions as Record<string, unknown>).headers : {}) as Record<string, unknown>;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...((options as Record<string, unknown>)?.headers as Record<string, unknown> || {})};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new campaign with specified type and parameters
         * @summary Create a new campaign
         * @param {ServicesCreateCampaignRequest} servicesCreateCampaignRequest Campaign creation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignsPost: async (servicesCreateCampaignRequest: ServicesCreateCampaignRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'servicesCreateCampaignRequest' is not null or undefined
            assertParamExists('campaignsPost', 'servicesCreateCampaignRequest', servicesCreateCampaignRequest)
            const localVarPath = `/campaigns`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...(baseOptions as Record<string, unknown> || {}), ...(options || {})};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication SessionAuth required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = (baseOptions && (baseOptions as Record<string, unknown>).headers ? (baseOptions as Record<string, unknown>).headers : {}) as Record<string, unknown>;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...((options as Record<string, unknown>)?.headers as Record<string, unknown> || {})};
            localVarRequestOptions.data = serializeDataIfNeeded(servicesCreateCampaignRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CampaignsApi - functional programming interface
 * @export
 */
export const CampaignsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CampaignsApiAxiosParamCreator(configuration)
    return {
        /**
         * Retrieve a list of campaigns with optional filtering and pagination
         * @summary List campaigns
         * @param {number} [limit] Maximum number of campaigns to return (1-100)
         * @param {number} [offset] Number of campaigns to skip
         * @param {CampaignsGetTypeEnum} [type] Filter by campaign type
         * @param {CampaignsGetStatusEnum} [status] Filter by campaign status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async campaignsGet(limit?: number, offset?: number, type?: CampaignsGetTypeEnum, status?: CampaignsGetStatusEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModelsCampaignAPI>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.campaignsGet(limit, offset, type, status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.campaignsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Create a new campaign with specified type and parameters
         * @summary Create a new campaign
         * @param {ServicesCreateCampaignRequest} servicesCreateCampaignRequest Campaign creation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async campaignsPost(servicesCreateCampaignRequest: ServicesCreateCampaignRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ModelsCampaignAPI>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.campaignsPost(servicesCreateCampaignRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CampaignsApi.campaignsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CampaignsApi - factory interface
 * @export
 */
export const CampaignsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CampaignsApiFp(configuration)
    return {
        /**
         * Retrieve a list of campaigns with optional filtering and pagination
         * @summary List campaigns
         * @param {number} [limit] Maximum number of campaigns to return (1-100)
         * @param {number} [offset] Number of campaigns to skip
         * @param {CampaignsGetTypeEnum} [type] Filter by campaign type
         * @param {CampaignsGetStatusEnum} [status] Filter by campaign status
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignsGet(limit?: number, offset?: number, type?: CampaignsGetTypeEnum, status?: CampaignsGetStatusEnum, options?: RawAxiosRequestConfig): AxiosPromise<Array<ModelsCampaignAPI>> {
            return localVarFp.campaignsGet(limit, offset, type, status, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new campaign with specified type and parameters
         * @summary Create a new campaign
         * @param {ServicesCreateCampaignRequest} servicesCreateCampaignRequest Campaign creation request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        campaignsPost(servicesCreateCampaignRequest: ServicesCreateCampaignRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsCampaignAPI> {
            return localVarFp.campaignsPost(servicesCreateCampaignRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CampaignsApi - interface
 * @export
 * @interface CampaignsApi
 */
export interface CampaignsApiInterface {
    /**
     * Retrieve a list of campaigns with optional filtering and pagination
     * @summary List campaigns
     * @param {number} [limit] Maximum number of campaigns to return (1-100)
     * @param {number} [offset] Number of campaigns to skip
     * @param {CampaignsGetTypeEnum} [type] Filter by campaign type
     * @param {CampaignsGetStatusEnum} [status] Filter by campaign status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApiInterface
     */
    campaignsGet(limit?: number, offset?: number, type?: CampaignsGetTypeEnum, status?: CampaignsGetStatusEnum, options?: RawAxiosRequestConfig): AxiosPromise<Array<ModelsCampaignAPI>>;

    /**
     * Create a new campaign with specified type and parameters
     * @summary Create a new campaign
     * @param {ServicesCreateCampaignRequest} servicesCreateCampaignRequest Campaign creation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApiInterface
     */
    campaignsPost(servicesCreateCampaignRequest: ServicesCreateCampaignRequest, options?: RawAxiosRequestConfig): AxiosPromise<ModelsCampaignAPI>;

}

/**
 * CampaignsApi - object-oriented interface
 * @export
 * @class CampaignsApi
 * @extends {BaseAPI}
 */
export class CampaignsApi extends BaseAPI implements CampaignsApiInterface {
    /**
     * Retrieve a list of campaigns with optional filtering and pagination
     * @summary List campaigns
     * @param {number} [limit] Maximum number of campaigns to return (1-100)
     * @param {number} [offset] Number of campaigns to skip
     * @param {CampaignsGetTypeEnum} [type] Filter by campaign type
     * @param {CampaignsGetStatusEnum} [status] Filter by campaign status
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public campaignsGet(limit?: number, offset?: number, type?: CampaignsGetTypeEnum, status?: CampaignsGetStatusEnum, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).campaignsGet(limit, offset, type, status, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new campaign with specified type and parameters
     * @summary Create a new campaign
     * @param {ServicesCreateCampaignRequest} servicesCreateCampaignRequest Campaign creation request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CampaignsApi
     */
    public campaignsPost(servicesCreateCampaignRequest: ServicesCreateCampaignRequest, options?: RawAxiosRequestConfig) {
        return CampaignsApiFp(this.configuration).campaignsPost(servicesCreateCampaignRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const CampaignsGetTypeEnum = {
    DomainGeneration: 'domain_generation',
    DnsValidation: 'dns_validation',
    HttpKeywordValidation: 'http_keyword_validation'
} as const;
export type CampaignsGetTypeEnum = typeof CampaignsGetTypeEnum[keyof typeof CampaignsGetTypeEnum];
/**
 * @export
 */
export const CampaignsGetStatusEnum = {
    Pending: 'pending',
    Queued: 'queued',
    Running: 'running',
    Pausing: 'pausing',
    Paused: 'paused',
    Completed: 'completed',
    Failed: 'failed',
    Archived: 'archived',
    Cancelled: 'cancelled'
} as const;
export type CampaignsGetStatusEnum = typeof CampaignsGetStatusEnum[keyof typeof CampaignsGetStatusEnum];
