{
  "effect": {
    "refinement": (data, ctx)=>{
    const isDomainGenCampaignType = data.selectedType === "domain_generation";
    const isDnsValCampaignType = data.selectedType === "dns_validation";
    const isHttpValCampaignType = data.selectedType === "http_keyword_validation";
    const needsInternalGenerationConfig = isDomainGenCampaignType;
    const needsExternalSourceConfig = isDnsValCampaignType || isHttpValCampaignType;
    // Validate internal generation config
    if (needsInternalGenerationConfig) {
        if (!data.generationPattern) {
            ctx.addIssue({
                code: _zod.ZodIssueCode.custom,
                message: "Generation pattern is required.",
                path: [
                    "generationPattern"
                ]
            });
        }
        if (data.constantPart === undefined || data.constantPart.trim() === "") {
            ctx.addIssue({
                code: _zod.ZodIssueCode.custom,
                message: "Constant part cannot be empty.",
                path: [
                    "constantPart"
                ]
            });
        }
        if (!data.tlds || data.tlds.length === 0) {
            ctx.addIssue({
                code: _zod.ZodIssueCode.custom,
                message: "At least one valid TLD (e.g., .com) is required.",
                path: [
                    "tldsInput"
                ]
            });
        }
        // Validate variable lengths based on pattern
        const needsCharsForVariableParts = data.generationPattern === "prefix_variable" && (data.prefixVariableLength || 0) > 0 || data.generationPattern === "suffix_variable" && (data.suffixVariableLength || 0) > 0 || data.generationPattern === "both_variable" && ((data.prefixVariableLength || 0) > 0 || (data.suffixVariableLength || 0) > 0);
        if (needsCharsForVariableParts && (data.allowedCharSet === undefined || data.allowedCharSet.trim() === "")) {
            ctx.addIssue({
                code: _zod.ZodIssueCode.custom,
                message: "Allowed character set cannot be empty if variable parts are used.",
                path: [
                    "allowedCharSet"
                ]
            });
        }
        // Pattern-specific validations
        if (data.generationPattern === "prefix_variable") {
            if (data.prefixVariableLength === undefined || data.prefixVariableLength <= 0) {
                ctx.addIssue({
                    code: _zod.ZodIssueCode.custom,
                    message: "Prefix variable length must be > 0.",
                    path: [
                        "prefixVariableLength"
                    ]
                });
            }
        } else if (data.generationPattern === "suffix_variable") {
            if (data.suffixVariableLength === undefined || data.suffixVariableLength <= 0) {
                ctx.addIssue({
                    code: _zod.ZodIssueCode.custom,
                    message: "Suffix variable length must be > 0.",
                    path: [
                        "suffixVariableLength"
                    ]
                });
            }
        } else if (data.generationPattern === "both_variable") {
            const prefixIsPositive = data.prefixVariableLength !== undefined && data.prefixVariableLength > 0;
            const suffixIsPositive = data.suffixVariableLength !== undefined && data.suffixVariableLength > 0;
            if (!prefixIsPositive && !suffixIsPositive) {
                ctx.addIssue({
                    code: _zod.ZodIssueCode.custom,
                    message: "For 'both_variable' pattern, at least one variable length (prefix or suffix) must be > 0.",
                    path: [
                        "prefixVariableLength"
                    ]
                });
            }
        }
        if (data.maxDomainsToGenerate !== undefined && data.maxDomainsToGenerate <= 0) {
            ctx.addIssue({
                code: _zod.ZodIssueCode.custom,
                message: "Target domains to generate must be a positive number.",
                path: [
                    "maxDomainsToGenerate"
                ]
            });
        }
    }
    // Validate external source config
    if (needsExternalSourceConfig) {
        if (!data.domainSourceSelectionMode || data.domainSourceSelectionMode === 'none') {
            ctx.addIssue({
                code: _zod.ZodIssueCode.custom,
                message: "A domain source (upload or campaign output) must be selected for this campaign type.",
                path: [
                    "domainSourceSelectionMode"
                ]
            });
        } else if (data.domainSourceSelectionMode === 'upload' && !data.uploadedDomainsFile && !(data.uploadedDomainsContentCache && data.uploadedDomainsContentCache.length > 0)) {
            ctx.addIssue({
                code: _zod.ZodIssueCode.custom,
                message: "A .txt file must be uploaded or previously processed domains must exist.",
                path: [
                    "uploadedDomainsFile"
                ]
            });
        } else if (data.domainSourceSelectionMode === 'campaign_output' && (!data.sourceCampaignId || data.sourceCampaignId === CampaignFormConstants.NONE_VALUE_PLACEHOLDER)) {
            ctx.addIssue({
                code: _zod.ZodIssueCode.custom,
                message: "A source campaign must be selected.",
                path: [
                    "sourceCampaignId"
                ]
            });
        }
        if (data.initialDomainsToProcessCount !== undefined && data.initialDomainsToProcessCount <= 0) {
            ctx.addIssue({
                code: _zod.ZodIssueCode.custom,
                message: "Number of domains to process must be a positive number.",
                path: [
                    "initialDomainsToProcessCount"
                ]
            });
        }
    }
    // Validate proxy assignment
    if (data.proxyAssignmentMode === 'single' && (!data.assignedProxyId || data.assignedProxyId === CampaignFormConstants.NONE_VALUE_PLACEHOLDER)) {
        ctx.addIssue({
            code: _zod.ZodIssueCode.custom,
            message: "A proxy must be selected for 'Single Proxy' mode.",
            path: [
                "assignedProxyId"
            ]
        });
    }
// Note: Lead generation validation removed as it's no longer a supported campaign type
},
    "type": "refinement"
  },
  "schema": {
    "and": function () { [native code] },
    "array": function () { [native code] },
    "brand": function () { [native code] },
    "catch": function () { [native code] },
    "default": function () { [native code] },
    "describe": function () { [native code] },
    "isNullable": function () { [native code] },
    "isOptional": function () { [native code] },
    "nullable": function () { [native code] },
    "nullish": function () { [native code] },
    "optional": function () { [native code] },
    "or": function () { [native code] },
    "parse": function () { [native code] },
    "parseAsync": function () { [native code] },
    "pipe": function () { [native code] },
    "promise": function () { [native code] },
    "readonly": function () { [native code] },
    "refine": function () { [native code] },
    "refinement": function () { [native code] },
    "safeParse": function () { [native code] },
    "safeParseAsync": function () { [native code] },
    "spa": function () { [native code] },
    "superRefine": function () { [native code] },
    "transform": function () { [native code] },
    "~standard": {
      "validate": (data) => this["~validate"](data),
      "vendor": "zod",
      "version": 1
    }
  },
  "typeName": "ZodEffects"
}