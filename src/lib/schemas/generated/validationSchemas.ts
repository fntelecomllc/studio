// Auto-generated Zod schemas from Go validation tags
// Generated on: 2025-06-18T19:29:14.926Z
// Do not edit this file manually - it will be overwritten

import { z } from 'zod';

// Enum schemas (defined inline to avoid circular imports)
const _personaTypeEnumSchema = z.enum(['dns', 'http']);
const _proxyProtocolEnumSchema = z.enum(['http', 'https', 'socks5', 'socks4']);
const _campaignTypeEnumSchema = z.enum(['domain_generation', 'dns_validation', 'http_keyword_validation']);
const _campaignStatusEnumSchema = z.enum(['pending', 'queued', 'running', 'pausing', 'paused', 'completed', 'failed', 'archived', 'cancelled']);
const _jobStatusEnumSchema = z.enum(['pending', 'queued', 'running', 'processing', 'completed', 'failed', 'retry']);
const _validationStatusEnumSchema = z.enum(['pending', 'valid', 'invalid', 'error', 'skipped']);
const _dnsValidationStatusEnumSchema = z.enum(['resolved', 'unresolved', 'timeout', 'error']);
const _httpValidationStatusEnumSchema = z.enum(['success', 'failed', 'timeout', 'error']);
const _keywordRuleTypeEnumSchema = z.enum(['string', 'regex']);

export const keywordExtractionRequestItemSchema = z.object({
  url: z.string().url(),
  httpPersonaId: z.string().uuid().optional(),
  dnsPersonaId: z.string().uuid().optional(),
  keywordSetId: z.string().uuid(),
});

export type KeywordExtractionRequestItem = z.infer<typeof keywordExtractionRequestItemSchema>;

export const keywordRuleRequestSchema = z.object({
  pattern: z.string(),
  ruleType: z.enum(["string", "regex"]),
  contextChars: z.number().int().gte(0).optional(),
});

export type KeywordRuleRequest = z.infer<typeof keywordRuleRequestSchema>;

export const createKeywordSetRequestSchema = z.object({
  name: z.string().min(1).max(255),
});

export type CreateKeywordSetRequest = z.infer<typeof createKeywordSetRequestSchema>;

export const updateKeywordSetRequestSchema = z.object({
  name: z.string().min(1).max(255).optional(),
});

export type UpdateKeywordSetRequest = z.infer<typeof updateKeywordSetRequestSchema>;

export const createPersonaRequestSchema = z.object({
  name: z.string().min(1).max(255),
  personaType: z.enum(["dns", "http"]),
  configDetails: z.record(z.any()),
});

export type CreatePersonaRequest = z.infer<typeof createPersonaRequestSchema>;

export const updatePersonaRequestSchema = z.object({
  name: z.string().min(1).max(255).optional(),
});

export type UpdatePersonaRequest = z.infer<typeof updatePersonaRequestSchema>;

export const createProxyRequestSchema = z.object({
  name: z.string().min(1).max(255),
  protocol: z.enum(["http", "https", "socks5", "socks4"]),
  address: z.string().regex(/^[a-zA-Z0-9.-]+:[0-9]+$/, "Invalid hostname:port format"),
});

export type CreateProxyRequest = z.infer<typeof createProxyRequestSchema>;

export const updateProxyRequestSchema = z.object({
  name: z.string().min(1).max(255).optional(),
  protocol: z.enum(["http", "https", "socks5", "socks4"]).optional(),
  address: z.string().regex(/^[a-zA-Z0-9.-]+:[0-9]+$/, "Invalid hostname:port format").optional(),
});

export type UpdateProxyRequest = z.infer<typeof updateProxyRequestSchema>;

export const loginRequestSchema = z.object({
  email: z.string().email(),
  password: z.string().min(12),
});

export type LoginRequest = z.infer<typeof loginRequestSchema>;

export const changePasswordRequestSchema = z.object({
  currentPassword: z.string(),
  newPassword: z.string().min(12),
});

export type ChangePasswordRequest = z.infer<typeof changePasswordRequestSchema>;

export const createUserRequestSchema = z.object({
  email: z.string().email(),
  firstName: z.string(),
  lastName: z.string(),
  password: z.string().min(12),
});

export type CreateUserRequest = z.infer<typeof createUserRequestSchema>;

export const dNSConfigDetailsSchema = z.object({
  queryTimeoutSeconds: z.number().int().gte(0),
  maxDomainsPerRequest: z.number().int().gt(0),
  resolverStrategy: z.enum(["random_rotation", "sequential_failover", "specific_order", "weighted_rotation"]).optional(),
  concurrentQueriesPerDomain: z.number().int().gt(0),
  queryDelayMinMs: z.number().int().gte(0),
  queryDelayMaxMs: z.number().int().gte(0),
  maxConcurrentGoroutines: z.number().int().gt(0),
  rateLimitDps: z.number().gte(0),
  rateLimitBurst: z.number().int().gte(0),
});

export type DNSConfigDetails = z.infer<typeof dNSConfigDetailsSchema>;

export const hTTPTLSClientHelloSchema = z.object({
  minVersion: z.enum(["TLS10", "TLS11", "TLS12", "TLS13"]).optional(),
  maxVersion: z.enum(["TLS10", "TLS11", "TLS12", "TLS13"]).optional(),
});

export type HTTPTLSClientHello = z.infer<typeof hTTPTLSClientHelloSchema>;

export const hTTPCookieHandlingSchema = z.object({
  mode: z.enum(["session", "none", "ignore"]).optional(),
});

export type HTTPCookieHandling = z.infer<typeof hTTPCookieHandlingSchema>;

export const hTTPConfigDetailsSchema = z.object({
  userAgent: z.string(),
  requestTimeoutSeconds: z.number().int().gte(0).optional(),
  rateLimitDps: z.number().gte(0).optional(),
  rateLimitBurst: z.number().int().gte(0).optional(),
});

export type HTTPConfigDetails = z.infer<typeof hTTPConfigDetailsSchema>;

export const personaSchema = z.object({
  name: z.string(),
  personaType: z.enum(["dns", "http"]),
  configDetails: z.record(z.any()),
});

export type Persona = z.infer<typeof personaSchema>;

export const proxySchema = z.object({
  name: z.string(),
  address: z.string(),
});

export type Proxy = z.infer<typeof proxySchema>;

export const keywordSetSchema = z.object({
  name: z.string(),
});

export type KeywordSet = z.infer<typeof keywordSetSchema>;

export const keywordRuleSchema = z.object({
  pattern: z.string(),
  ruleType: z.enum(["string", "regex"]),
  contextChars: z.number().int().gte(0).optional(),
});

export type KeywordRule = z.infer<typeof keywordRuleSchema>;

export const campaignSchema = z.object({
  name: z.string(),
  campaignType: z.any(),
  status: z.any(),
  progressPercentage: z.number().gte(0).lte(100).optional(),
  totalItems: z.number().int().gte(0).optional(),
  processedItems: z.number().int().gte(0).optional(),
});

export type Campaign = z.infer<typeof campaignSchema>;

export const domainGenerationCampaignParamsSchema = z.object({
  patternType: z.enum(["prefix", "suffix", "both"]),
  variableLength: z.number().int().gt(0).optional(),
  characterSet: z.string().optional(),
  constantString: z.string().optional(),
  tld: z.string(),
  numDomainsToGenerate: z.number().int().gt(0),
  totalPossibleCombinations: z.number().int().gt(0),
  currentOffset: z.number().int().gte(0),
});

export type DomainGenerationCampaignParams = z.infer<typeof domainGenerationCampaignParamsSchema>;

export const generatedDomainSchema = z.object({
  generationCampaignId: z.string().uuid(),
  domainName: z.string(),
  offsetIndex: z.number().int().gte(0),
});

export type GeneratedDomain = z.infer<typeof generatedDomainSchema>;

export const dNSValidationCampaignParamsSchema = z.object({
  sourceGenerationCampaignId: z.string().uuid().uuid().optional(),
  rotationIntervalSeconds: z.number().int().gte(0).optional(),
  processingSpeedPerMinute: z.number().int().gte(0).optional(),
  batchSize: z.number().int().gt(0).optional(),
  retryAttempts: z.number().int().gte(0).optional(),
});

export type DNSValidationCampaignParams = z.infer<typeof dNSValidationCampaignParamsSchema>;

export const dNSValidationResultSchema = z.object({
  dnsCampaignId: z.string().uuid(),
  domainName: z.string(),
  validationStatus: z.string(),
  attempts: z.number().int().gte(0).optional(),
});

export type DNSValidationResult = z.infer<typeof dNSValidationResultSchema>;

export const hTTPKeywordCampaignParamsSchema = z.object({
  sourceCampaignId: z.string().uuid(),
  rotationIntervalSeconds: z.number().int().gte(0).optional(),
  processingSpeedPerMinute: z.number().int().gte(0).optional(),
  batchSize: z.number().int().gt(0).optional(),
  retryAttempts: z.number().int().gte(0).optional(),
  sourceType: z.string(),
});

export type HTTPKeywordCampaignParams = z.infer<typeof hTTPKeywordCampaignParamsSchema>;

export const hTTPKeywordResultSchema = z.object({
  httpKeywordCampaignId: z.string().uuid(),
  domainName: z.string(),
  validationStatus: z.string(),
  attempts: z.number().int().gte(0).optional(),
});

export type HTTPKeywordResult = z.infer<typeof hTTPKeywordResultSchema>;

export const auditLogSchema = z.object({
  action: z.string(),
});

export type AuditLog = z.infer<typeof auditLogSchema>;

export const testModelSchema = z.object({
  name: z.string(),
});

export type TestModel = z.infer<typeof testModelSchema>;

export const createCampaignRequestSchema = z.object({
  campaignType: z.enum(["domain_generation", "dns_validation", "http_keyword_validation"]),
  name: z.string(),
});

export type CreateCampaignRequest = z.infer<typeof createCampaignRequestSchema>;

export const domainGenerationParamsSchema = z.object({
  patternType: z.enum(["prefix", "suffix", "both"]),
  variableLength: z.number().int().gt(0),
  characterSet: z.string(),
  constantString: z.string(),
  tld: z.string(),
  numDomainsToGenerate: z.number().int().gte(0).optional(),
});

export type DomainGenerationParams = z.infer<typeof domainGenerationParamsSchema>;

export const dnsValidationParamsSchema = z.object({
  sourceCampaignId: z.string().uuid(),
  rotationIntervalSeconds: z.number().int().gte(0).optional(),
  processingSpeedPerMinute: z.number().int().gte(0).optional(),
  batchSize: z.number().int().gt(0).optional(),
  retryAttempts: z.number().int().gte(0).optional(),
});

export type DnsValidationParams = z.infer<typeof dnsValidationParamsSchema>;

export const httpKeywordParamsSchema = z.object({
  sourceCampaignId: z.string().uuid(),
  rotationIntervalSeconds: z.number().int().gte(0).optional(),
  processingSpeedPerMinute: z.number().int().gte(0).optional(),
  batchSize: z.number().int().gt(0).optional(),
  retryAttempts: z.number().int().gte(0).optional(),
});

export type HttpKeywordParams = z.infer<typeof httpKeywordParamsSchema>;

export const createDomainGenerationCampaignRequestSchema = z.object({
  name: z.string(),
  patternType: z.enum(["prefix", "suffix", "both"]),
  variableLength: z.number().int().gt(0),
  characterSet: z.string(),
  constantString: z.string(),
  tld: z.string(),
  numDomainsToGenerate: z.number().int().gte(0).optional(),
});

export type CreateDomainGenerationCampaignRequest = z.infer<typeof createDomainGenerationCampaignRequestSchema>;

export const createDNSValidationCampaignRequestSchema = z.object({
  name: z.string(),
  sourceCampaignId: z.string().uuid(),
  rotationIntervalSeconds: z.number().int().gte(0).optional(),
  processingSpeedPerMinute: z.number().int().gte(0).optional(),
  batchSize: z.number().int().gt(0).optional(),
  retryAttempts: z.number().int().gte(0).optional(),
});

export type CreateDNSValidationCampaignRequest = z.infer<typeof createDNSValidationCampaignRequestSchema>;

export const createHTTPKeywordCampaignRequestSchema = z.object({
  name: z.string(),
  sourceCampaignId: z.string().uuid(),
  rotationIntervalSeconds: z.number().int().gte(0).optional(),
  processingSpeedPerMinute: z.number().int().gte(0).optional(),
  batchSize: z.number().int().gt(0).optional(),
  retryAttempts: z.number().int().gte(0).optional(),
});

export type CreateHTTPKeywordCampaignRequest = z.infer<typeof createHTTPKeywordCampaignRequestSchema>;

